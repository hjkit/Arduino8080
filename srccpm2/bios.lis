Z80/8080-Macro-Assembler  Release 2.0

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;	8080 CBIOS for z80pack machines using SD-FDC
                       2      2 ;
                       3      3 ;	Copyright (C) 2024 by Udo Munk
                       4      4 ;
0040  =                5      5 MSIZE	EQU	64		;CP/M memory size in kilobytes
                       6      6 ;
                       7      7 ;	"bias" is address offset from 3400H for memory systems
                       8      8 ;	than 16K (referred to as "b" throughout the text).
                       9      9 ;
b000  =               10     10 BIAS	EQU	(MSIZE-20)*1024
e400  =               11     11 CCP	EQU	3400H+BIAS	;base of ccp
ec06  =               12     12 BDOS	EQU	CCP+806H	;base of bdos
fa00  =               13     13 BIOS	EQU	CCP+1600H	;base of bios
002c  =               14     14 NSECTS	EQU	(BIOS-CCP)/128	;warm start sector count
0004  =               15     15 CDISK	EQU	0004H		;current disk number 0=A,...,15=P
0003  =               16     16 IOBYTE	EQU	0003H		;Intel I/O byte
0040  =               17     17 FDCCMD	EQU	0040H		;FDC command bytes
0000  =               18     18 DDTRK	EQU	0		;offset for track
0001  =               19     19 DDSEC	EQU	1		;offset for sector
0002  =               20     20 DDLDMA	EQU	2		;offset for DMA address low
0003  =               21     21 DDHDMA	EQU	3		;offset for DMA address high
                      22     22 ;
                      23     23 ;	I/O ports
                      24     24 ;
0000  =               25     25 CONSTA	EQU	0		;console status port
0001  =               26     26 CONDAT	EQU	1		;console data port
0004  =               27     27 FDC	EQU	4		;port for the FDC
                      28     28 ;
                      29     29 	ORG	BIOS		;origin of BIOS
                      30     30 ;
                      31     31 ;	jump vector for individual subroutines
                      32     32 ;
fa00  c3 ae fa        33     33 	JMP	BOOT		;cold boot
fa03  c3 d2 fa        34     34 WBE	JMP	WBOOT		;warm start
fa06  c3 40 fb        35     35 	JMP	CONST		;console status
fa09  c3 4b fb        36     36 	JMP	CONIN		;console character in
fa0c  c3 54 fb        37     37 	JMP	CONOUT		;console character out
fa0f  c3 60 fb        38     38 	JMP	LIST		;list character out
fa12  c3 61 fb        39     39 	JMP	PUNCH		;punch character out
fa15  c3 62 fb        40     40 	JMP	READER		;reader character in
fa18  c3 65 fb        41     41 	JMP	HOME		;move disk head to home position
fa1b  c3 6a fb        42     42 	JMP	SELDSK		;select disk drive
fa1e  c3 81 fb        43     43 	JMP	SETTRK		;set track number
fa21  c3 86 fb        44     44 	JMP	SETSEC		;set sector number
fa24  c3 8b fb        45     45 	JMP	SETDMA		;set dma address
fa27  c3 94 fb        46     46 	JMP	READ		;read disk sector
fa2a  c3 9c fb        47     47 	JMP	WRITE		;write disk sector
fa2d  c3 5e fb        48     48 	JMP	LISTST		;list status
fa30  c3 a9 fb        49     49 	JMP	SECTRAN		;sector translate
                      50     50 ;
                      51     51 ;	data tables
                      52     52 ;
fa33  36 34           53     53 SIGNON	DB	MSIZE / 10 + '0',MSIZE MOD 10 + '0'
fa35  4b 20 43 50     54     54 	DB	'K CP/M 2.2 VERS B01',13,10,0
fa39  2f 4d 20 32     54     55
fa3d  2e 32 20 56     54     56
fa41  45 52 53 20     54     57
fa45  42 30 31 0d     54     58
fa49  0a 00           54     59
fa4b  0d 0a 42 4f     55     60 BOOTERR	DB	13,10,'BOOT ERROR',13,10,0
fa4f  4f 54 20 45     55     61
fa53  52 52 4f 52     55     62
fa57  0d 0a 00        55     63
                      56     64 ;
                      57     65 ;	disk parameter header for disk 0
fa5a  7a fa 00 00     58     66 DPBASE	DW	TRANS,0000H
fa5e  00 00 00 00     59     67 	DW	0000H,0000H
fa62  b2 fb 94 fa     60     68 	DW	DIRBF,DPBLK
fa66  70 fc 32 fc     61     69 	DW	CHK00,ALL00
                      62     70 ;	disk parameter header for disk 1
fa6a  7a fa 00 00     63     71 	DW	TRANS,0000H
fa6e  00 00 00 00     64     72 	DW	0000H,0000H
fa72  b2 fb 94 fa     65     73 	DW	DIRBF,DPBLK
fa76  80 fc 51 fc     66     74 	DW	CHK01,ALL01
                      67     75 ;
                      68     76 ;	sector translate table for IBM 8" SD disks
fa7a  01 07 0d 13     69     77 TRANS	DB	1,7,13,19	;sectors 1,2,3,4
fa7e  19 05 0b 11     70     78 	DB	25,5,11,17	;sectors 5,6,7,8
fa82  17 03 09 0f     71     79 	DB	23,3,9,15	;sectors 9,10,11,12
fa86  15 02 08 0e     72     80 	DB	21,2,8,14	;sectors 13,14,15,16
fa8a  14 1a 06 0c     73     81 	DB	20,26,6,12	;sectors 17,18,19,20
fa8e  12 18 04 0a     74     82 	DB	18,24,4,10	;sectors 21,22,23,24
fa92  10 16           75     83 	DB	16,22		;sectors 25,26
                      76     84 ;
                      77     85 ;	disk parameter block for IBM 8" SD disks
fa94  1a 00           78     86 DPBLK	DW	26		;sectors per track
fa96  03              79     87 	DB	3		;block shift factor
fa97  07              80     88 	DB	7		;block mask
fa98  00              81     89 	DB	0		;extent mask
fa99  f2 00           82     90 	DW	242		;disk size-1
fa9b  3f 00           83     91 	DW	63		;directory max
fa9d  c0              84     92 	DB	192		;alloc 0
fa9e  00              85     93 	DB	0		;alloc 1
fa9f  10 00           86     94 	DW	16		;check size
faa1  02 00           87     95 	DW	2		;track offset
                      88     96 ;
                      89     97 ;	print a message to the console
                      90     98 ;	pointer to string in hl
                      91     99 ;
faa3  7e              92    100 PRTMSG	MOV	A,M		;get next message byte
faa4  b7              93    101 	ORA	A		;is it zero?
faa5  c8              94    102 	RZ			;yes, done
faa6  4f              95    103 	MOV	C,A		;no, print character on console
faa7  cd 54 fb        96    104 	CALL	CONOUT
faaa  23              97    105 	INX	H		;and do next
faab  c3 a3 fa        98    106 	JMP	PRTMSG
                      99    107 ;
                     100    108 ;	cold start
                     101    109 ;
faae  31 80 00       102    110 BOOT	LXI	SP,80H		;use space below buffer for stack
fab1  21 33 fa       103    111 	LXI	H,SIGNON	;print signon
fab4  cd a3 fa       104    112 	CALL	PRTMSG
fab7  af             105    113 	XRA	A		;zero in the accumulator
fab8  32 04 00       106    114 	STA	CDISK		;select disk drive 0
fabb  32 b1 fb       107    115 	STA	DSKNO
fabe  32 03 00       108    116 	STA	IOBYTE		;setup IOBYTE
fac1  3e 10          109    117 	MVI	A,10H		;setup FDC command
fac3  d3 04          110    118 	OUT	FDC
fac5  3e 40          111    119 	MVI	A,FDCCMD AND 0FFH
fac7  d3 04          112    120 	OUT	FDC
fac9  3e 00          113    121 	MVI	A,FDCCMD SHR 8
facb  d3 04          114    122 	OUT	FDC
facd  37             115    123 	STC			;flag for cold start
face  3f             116    124 	CMC
facf  c3 1c fb       117    125 	JMP	GOCPM		;initialize and go to CP/M
                     118    126 ;
                     119    127 ;	warm start
                     120    128 ;
fad2  31 80 00       121    129 WBOOT	LXI	SP,80H		;use space below buffer for stack
fad5  0e 00          122    130 	MVI	C,0		;select disk 0
fad7  cd 6a fb       123    131 	CALL	SELDSK
fada  cd 65 fb       124    132 	CALL	HOME		;go to track 0
fadd  06 2c          125    133 	MVI	B,NSECTS	;B counts # of sectors to load
fadf  0e 00          126    134 	MVI	C,0		;C has the current track #
fae1  16 02          127    135 	MVI	D,2		;D has the next sector to load
fae3  21 00 e4       128    136 	LXI	H,CCP		;base of CP/M
fae6  c5             129    137 LOAD1	PUSH	B		;save sector count and current track
fae7  d5             130    138 	PUSH	D		;save next sector to read
fae8  e5             131    139 	PUSH	H		;save DMA address
fae9  4a             132    140 	MOV	C,D		;get sector address to C
faea  cd 86 fb       133    141 	CALL	SETSEC		;set sector address
faed  c1             134    142 	POP	B		;recall DMA address to BC
faee  c5             135    143 	PUSH	B		;and replace on stack for later recall
faef  cd 8b fb       136    144 	CALL	SETDMA		;set DMA address from BC
faf2  cd 94 fb       137    145 	CALL	READ		;read sector
faf5  b7             138    146 	ORA	A		;any errors?
faf6  ca 00 fb       139    147 	JZ	LOAD2		;no, continue
faf9  21 4b fa       140    148 	LXI	H,BOOTERR	;otherwise print message
fafc  cd a3 fa       141    149 	CALL	PRTMSG
faff  76             142    150 	HLT			;and halt the machine
fb00  e1             143    151 LOAD2	POP	H		;recall DMA address
fb01  11 80 00       144    152 	LXI	D,128		;DMA = DMA + 128
fb04  19             145    153 	DAD	D		;next DMA address now in HL
fb05  d1             146    154 	POP	D		;recall sector address
fb06  c1             147    155 	POP	B		;recall # of sectors remaining
fb07  05             148    156 	DCR	B		;sectors = sectors - 1
fb08  37             149    157 	STC			;flag for warm start
fb09  ca 1c fb       150    158 	JZ	GOCPM		;transfer to CP/M if all loaded
fb0c  14             151    159 	INR	D		;next sector
fb0d  7a             152    160 	MOV	A,D		;sector = 27 ?
fb0e  fe 1b          153    161 	CPI	27
fb10  da e6 fa       154    162 	JC	LOAD1		;no, continue
fb13  16 01          155    163 	MVI	D,1		;else begin with sector 1 on next track
fb15  0c             156    164 	INR	C
fb16  cd 81 fb       157    165 	CALL	SETTRK
fb19  c3 e6 fa       158    166 	JMP	LOAD1		;for another sector
fb1c  3e c3          159    167 GOCPM	MVI	A,0C3H		;C3 is a JMP instruction
fb1e  32 00 00       160    168 	STA	0		;for jmp to wboot
fb21  21 03 fa       161    169 	LXI	H,WBE		;WBOOT entry point
fb24  22 01 00       162    170 	SHLD	1		;set address for JMP at 0
fb27  32 05 00       163    171 	STA	5		;for JMP to BDOS
fb2a  21 06 ec       164    172 	LXI	H,BDOS		;BDOS entry point
fb2d  22 06 00       165    173 	SHLD	6		;set address for JMP at 5
fb30  01 80 00       166    174 	LXI	B,80H		;default dma address is 80H
fb33  cd 8b fb       167    175 	CALL	SETDMA
fb36  3a 04 00       168    176 	LDA	CDISK		;get current disk number
fb39  4f             169    177 	MOV	C,A		;send to the CCP
fb3a  da 03 e4       170    178 	JC	CCP+3		;go to CCP warm start
fb3d  c3 00 e4       171    179 	JMP	CCP		;go to CCP cold start
                     172    180 ;
                     173    181 ;	console status, return 0FFH if character ready, 00H if not
                     174    182 ;
fb40  db 00          175    183 CONST	IN	CONSTA		;get console status
fb42  0f             176    184 	RRC			;test bit 0
fb43  da 49 fb       177    185 	JC	CONST1		;not ready
fb46  3e ff          178    186 	MVI	A,0FFH		;ready, set flag
fb48  c9             179    187 	RET
fb49  af             180    188 CONST1	XRA	A		;zero A
fb4a  c9             181    189 	RET
                     182    190 ;
                     183    191 ;	console input character into register A
                     184    192 ;
fb4b  db 00          185    193 CONIN	IN	CONSTA		;get console status
fb4d  0f             186    194 	RRC			;test bit 0
fb4e  da 4b fb       187    195 	JC	CONIN		;not ready
fb51  db 01          188    196 	IN	CONDAT		;get character from console
fb53  c9             189    197 	RET
                     190    198 ;
                     191    199 ;	console output
                     192    200 ;
fb54  db 00          193    201 CONOUT	IN	CONSTA		;get status
fb56  07             194    202 	RLC			;test bit 7
fb57  da 54 fb       195    203 	JC	CONOUT		;wait until transmitter ready
fb5a  79             196    204 	MOV	A,C		;get character into accumulator
fb5b  d3 01          197    205 	OUT	CONDAT		;send to console
fb5d  c9             198    206 	RET
                     199    207 ;
                     200    208 ;	printer status, return 0FFH if character ready, 00H if not
                     201    209 ;
fb5e  af             202    210 LISTST	XRA	A		;we have no printer
fb5f  c9             203    211 	RET			;so never ready
                     204    212 ;
                     205    213 ;	line printer output
                     206    214 ;
fb60  c9             207    215 LIST	RET			;we have no printer
                     208    216 ;
                     209    217 ;	punch character from register C
                     210    218 ;
fb61  c9             211    219 PUNCH	RET			;we have no puncher
                     212    220 ;
                     213    221 ;	read character into register A from reader
                     214    222 ;
fb62  3e 1a          215    223 READER	MVI	A,01AH		;we have no reader
fb64  c9             216    224 	RET			;so return CTL-Z
                     217    225 ;
                     218    226 ;	move to track 0 position on current disk
                     219    227 ;
fb65  0e 00          220    228 HOME	MVI	C,0		;select track 0
fb67  c3 81 fb       221    229 	JMP	SETTRK
                     222    230 ;
                     223    231 ;	select disk given by register C
                     224    232 ;
fb6a  21 00 00       225    233 SELDSK	LXI	H,0		;error return code
fb6d  79             226    234 	MOV	A,C		;get disk # to accumulator
fb6e  fe 02          227    235 	CPI	2		;disk drive < 2 ?
fb70  da 74 fb       228    236 	JC	SEL1
fb73  c9             229    237 	RET			;no, return with error
fb74  32 b1 fb       230    238 SEL1	STA	DSKNO		;save disk #
fb77  69             231    239 	MOV	L,C		;HL = disk #
fb78  29             232    240 	DAD	H		;*2
fb79  29             233    241 	DAD	H		;*4
fb7a  29             234    242 	DAD	H		;*8
fb7b  29             235    243 	DAD	H		;*16 (size of each header)
fb7c  11 5a fa       236    244 	LXI	D,DPBASE
fb7f  19             237    245 	DAD	D		;HL=.DPBASE(DISKNO*16)
fb80  c9             238    246 	RET
                     239    247 ;
                     240    248 ;	set track given by register C
                     241    249 ;
fb81  79             242    250 SETTRK	MOV	A,C		;get to accumulator
fb82  32 40 00       243    251 	STA	FDCCMD+DDTRK	;set in FDC command
fb85  c9             244    252         RET
                     245    253 ;
                     246    254 ;	set sector given by register C
                     247    255 ;
fb86  79             248    256 SETSEC	MOV	A,C		;get to accumulator
fb87  32 41 00       249    257 	STA     FDCCMD+DDSEC	;set in FDC command
fb8a  c9             250    258         RET
                     251    259 ;
                     252    260 ;	set DMA address given by registers B and C
                     253    261 ;
fb8b  79             254    262 SETDMA	MOV	A,C		;low order address
fb8c  32 42 00       255    263 	STA	FDCCMD+DDLDMA	;set in FDC command
fb8f  78             256    264 	MOV	A,B		;high order address
fb90  32 43 00       257    265 	STA	FDCCMD+DDHDMA	;set in FDC command
fb93  c9             258    266         RET
                     259    267 ;
                     260    268 ;	perform read operation
                     261    269 ;
fb94  3a b1 fb       262    270 READ	LDA     DSKNO		;get disk #
fb97  f6 20          263    271 	ORI	20H		;mask in read command
fb99  c3 a4 fb       264    272         JMP     DOIO            ;do I/O operation
                     265    273 ;
                     266    274 ;	perform write operation
                     267    275 ;
fb9c  3a b1 fb       268    276 WRITE	LDA	DSKNO		;get disk #
fb9f  f6 40          269    277 	ORI	40H		;mask in write command
fba1  c3 a4 fb       270    278 	JMP	DOIO		;do I/O operation
                     271    279 ;
                     272    280 ;	perform read/write I/O
                     273    281 ;
fba4  d3 04          274    282 DOIO	OUT	FDC		;ask FDC to execute the command
fba6  db 04          275    283 	IN	FDC		;get status from FDC
fba8  c9             276    284         RET
                     277    285 ;
                     278    286 ;	translate the sector given by BC using
                     279    287 ;	the translation table given by DE
                     280    288 ;
fba9  eb             281    289 SECTRAN	XCHG			;HL=.TRANS
fbaa  09             282    290 	DAD	B               ;HL=.TRANS(SECTOR)
fbab  eb             283    291 	XCHG
fbac  1a             284    292 	LDAX	D
fbad  6f             285    293 	MOV	L,A		;L=TRANS(SECTOR)
fbae  26 00          286    294 	MVI	H,0		;HL=TRANS(SECTOR)
fbb0  c9             287    295 	RET			;with value in HL
                     288    296 ;
                     289    297 ;	The remainder of the CBIOS is reserved uninitialized
                     290    298 ;	data area, and does not need to be part of the system
                     291    299 ;	memory image. The space must be available, however,
                     292    300 ;	between "BEGDAT" and "ENDDAT".
                     293    301 ;
fbb1  =              294    302 BEGDAT	EQU	$		;begin of data area
                     295    303 ;
fbb1                 296    304 DSKNO	DS	1		;selected disk
                     297    305 ;
fbb2                 298    306 DIRBF	DS	128		;scratch directory area
fc32                 299    307 ALL00	DS	31		;allocation vector 0
fc51                 300    308 ALL01	DS	31		;allocation vector 1
fc70                 301    309 CHK00	DS	16		;check vector 0
fc80                 302    310 CHK01	DS	16		;check vector 1
                     303    311 ;
fc90  =              304    312 ENDDAT	EQU	$		;end of data area
00df  =              305    313 DATSIZ	EQU	$-BEGDAT	;size of data area
                     306    314 ;
fc90                 307    315 	END			;of CBIOS

Symbol table

ALL00   fc32    ALL01   fc51    BDOS    ec06    BEGDAT  fbb1    BIAS    b000 
BIOS    fa00    BOOT    faae    BOOTERR fa4b    CCP     e400    CDISK   0004 
CHK00   fc70    CHK01   fc80    CONDAT  0001    CONIN   fb4b    CONOUT  fb54 
CONST   fb40    CONST1  fb49    CONSTA  0000    DATSIZ  00df*   DDHDMA  0003 
DDLDMA  0002    DDSEC   0001    DDTRK   0000    DIRBF   fbb2    DOIO    fba4 
DPBASE  fa5a    DPBLK   fa94    DSKNO   fbb1    ENDDAT  fc90*   FDC     0004 
FDCCMD  0040    GOCPM   fb1c    HOME    fb65    IOBYTE  0003    LIST    fb60 
LISTST  fb5e    LOAD1   fae6    LOAD2   fb00    MSIZE   0040    NSECTS  002c 
PRTMSG  faa3    PUNCH   fb61    READ    fb94    READER  fb62    SECTRAN fba9 
SEL1    fb74    SELDSK  fb6a    SETDMA  fb8b    SETSEC  fb86    SETTRK  fb81 
SIGNON  fa33    TRANS   fa7a    WBE     fa03    WBOOT   fad2    WRITE   fb9c 
