Z80/8080-Macro-Assembler  Release 2.0

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;	CP/M 2.2 boot-loader for Arduino 8080
                       2      2 ;
                       3      3 ;	Copyright (C) 2024 by Udo Munk
                       4      4 ;
                       5      5 	ORG	0		;mem base of boot
                       6      6 ;
0040  =                7      7 MSIZE	EQU	64		;mem size in kbytes
                       8      8 ;
b000  =                9      9 BIAS	EQU	(MSIZE-20)*1024	;offset from 20k system
e400  =               10     10 CCP	EQU	3400H+BIAS	;base of the ccp
e400  =               11     11 CPMB	EQU	BIAS+3400H	;start of CP/M
fa00  =               12     12 BOOTE	EQU	CPMB+1600H	;cold boot entry point
0033  =               13     13 SECTS	EQU	51		;# of sectors to load (26 * 2 - 1)
                      14     14 ;
                      15     15 ;	I/O ports
                      16     16 ;
0004  =               17     17 FDC	EQU	4		;FDC port
                      18     18 ;
0000  f3              19     19 	DI			;disable interrupts
0001  31 ff 00        20     20 	LXI	SP,0FFH		;some space for stack
0004  3e 10           21     21 	MVI	A,10H		;setup command for FDC
0006  d3 04           22     22 	OUT	FDC
0008  3e 45           23     23 	MVI	A,CMD AND 0FFH
000a  d3 04           24     24 	OUT	FDC
000c  3e 00           25     25 	MVI	A,CMD SHR 8
000e  d3 04           26     26 	OUT	FDC
0010  01 02 00        27     27 	LXI	B,2		;B=track 0, C=sector 2
0013  16 33           28     28 	MVI	D,SECTS		;D=# sectors to load
                      29     29 ;
                      30     30 ; load the next sector
                      31     31 ;
0015  3e 20           32     32 LSECT	MVI	A,20H		;tell FDC to read sector on drive 0
0017  d3 04           33     33 	OUT	FDC
0019  db 04           34     34 	IN	FDC		;get result from FDC
001b  b7              35     35 	ORA	A
001c  ca 20 00        36     36 	JZ	BOOT1
001f  76              37     37 	HLT			;read error, halt CPU
0020  15              38     38 BOOT1	DCR	D		;SECTS=SECTS-1
0021  ca 00 fa        39     39 	JZ	BOOTE		;go to CP/M if all sectors done
0024  0c              40     40 	INR	C		;sector = sector + 1
0025  79              41     41 	MOV	A,C
0026  fe 1b           42     42 	CPI	27		;last sector of track?
0028  da 2e 00        43     43 	JC	BOOT2		;no, do next sector
002b  0e 01           44     44 	MVI	C,1		;sector = 1
002d  04              45     45 	INR	B		;track = track + 1
002e  78              46     46 BOOT2	MOV	A,B		;setup command
002f  32 45 00        47     47 	STA	CMD+0		;save track
0032  79              48     48 	MOV	A,C
0033  32 46 00        49     49 	STA	CMD+1		;save sector
0036  d5              50     50 	PUSH	D
0037  2a 47 00        51     51 	LHLD	CMD+2		;get DMA address
003a  11 80 00        52     52 	LXI	D,80H		;and increase it by 128
003d  19              53     53 	DAD	D
003e  d1              54     54 	POP	D
003f  22 47 00        55     55 	SHLD	CMD+2		;set new dma address
0042  c3 15 00        56     56 	JMP	LSECT		;for next sector
                      57     57 ;
                      58     58 ; command bytes for the FDC
0045  00              59     59 CMD	DB	00H		;track 0
0046  02              60     60 	DB	02H		;sector 2
0047  00              61     61 	DB	CPMB AND 0FFH	;DMA address low
0048  e4              62     62 	DB	CPMB SHR 8	;DMA address high
                      63     63 
0049                  64     64 	END			;of boot loader

Symbol table

BIAS  b000    BOOT1 0020    BOOT2 002e    BOOTE fa00    CCP   e400*
CMD   0045    CPMB  e400    FDC   0004    LSECT 0015    MSIZE 0040 
SECTS 0033    
