Z80/8080-Macro-Assembler  Release 2.0	Mon May  6 11:49:57 2024

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;*************************************************************
                       2      2 ; 
                       3      3 ;                 TINY BASIC FOR INTEL 8080
                       4      4 ;                       VERSION 2.0
                       5      5 ;                     BY LI-CHEN WANG
                       6      6 ;                  MODIFIED AND TRANSLATED
                       7      7 ;                    TO INTEL MNEMONICS
                       8      8 ;                     BY ROGER RAUSKOLB
                       9      9 ;                      10 OCTOBER,1976
                      10     10 ;                        @COPYLEFT
                      11     11 ;                   ALL WRONGS RESERVED
                      12     12 ; 
                      13     13 ;                 ADDED FIX FOR BUGGY CHGSGN
                      14     14 ;                 UDO MUNK, 10 DECEMBER 2019
                      15     15 ;
                      16     16 ;               THIS VERSION HAS I/O MODIFIED
                      17     17 ;                    FOR Z80PACK MACHINES
                      18     18 ;                  UDO MUNK, 26 APRIL 2024
                      19     19 ;
                      20     20 ;*************************************************************
                      21     21 ; 
                      22     22 ; *** ZERO PAGE SUBROUTINES ***
                      23     23 ; 
                      24     24 ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
                      25     25 ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
                      26     26 ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
                      27     27 ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
                      28     28 ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
                      29     29 ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
                      30     30 ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
                      31     31 ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
                      32     32 ; 
                      33     33 DWA     MACRO WHERE
                      34     34         DB   (WHERE SHR 8) + 128
                      35     35         DB   WHERE AND 0FFH
                      36     36         ENDM
                      37     37 ;
                      38     38         ORG  0H
0000  31 00 0a        39     39 START:  LXI  SP,STACK                   ;*** COLD START ***
0003  3e ff           40     40         MVI  A,0FFH
0005  c3 45 06        41     41         JMP  INIT
                      42     42 ;
0008  e3              43     43         XTHL                            ;*** TSTC OR RST 1 ***
0009  ef              44     44         RST  5                          ;IGNORE BLANKS AND
000a  be              45     45         CMP  M                          ;TEST CHARACTER
000b  c3 68 00        46     46         JMP  TC1                        ;REST OF THIS IS AT TC1
                      47     47 ;
000e  3e 0d           48     48 CRLF:   MVI  A,CR                       ;*** CRLF ***
                      49     49 ;
0010  f5              50     50         PUSH PSW                        ;*** OUTC OR RST 2 ***
0011  3a 00 08        51     51         LDA  OCSW                       ;PRINT CHARACTER ONLY
0014  b7              52     52         ORA  A                          ;IF OCSW SWITCH IS ON
0015  c3 67 06        53     53         JMP  OC2                        ;REST OF THIS IS AT OC2
                      54     54 ;
0018  cd 71 03        55     55         CALL EXPR2                      ;*** EXPR OR RST 3 ***
001b  e5              56     56         PUSH H                          ;EVALUATE AN EXPRESSION
001c  c3 2d 03        57     57         JMP  EXPR1                      ;REST OF IT AT EXPR1
001f  57              58     58         DB   'W'
                      59     59 ;
0020  7c              60     60         MOV  A,H                        ;*** COMP OR RST 4 ***
0021  ba              61     61         CMP  D                          ;COMPARE HL WITH DE
0022  c0              62     62         RNZ                             ;RETURN CORRECT C AND
0023  7d              63     63         MOV  A,L                        ;Z FLAGS
0024  bb              64     64         CMP  E                          ;BUT OLD A IS LOST
0025  c9              65     65         RET
0026  41 4e           66     66         DB   'AN'
                      67     67 ;
0028  1a              68     68 SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
0029  fe 20           69     69         CPI  20H                        ;IGNORE BLANKS
002b  c0              70     70         RNZ                             ;IN TEXT (WHERE DE->)
002c  13              71     71         INX  D                          ;AND RETURN THE FIRST
002d  c3 28 00        72     72         JMP  SS1                        ;NON-BLANK CHAR. IN A
                      73     73 ;
0030  f1              74     74         POP  PSW                        ;*** FINISH/RST 6 ***
0031  cd b6 04        75     75         CALL FIN                        ;CHECK END OF COMMAND
0034  c3 c9 04        76     76         JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0037  47              77     77         DB   'G'
                      78     78 ;
0038  ef              79     79         RST  5                          ;*** TSTV OR RST 7 ***
0039  d6 40           80     80         SUI  40H                        ;TEST VARIABLES
003b  d8              81     81         RC                              ;C:NOT A VARIABLE
003c  c2 58 00        82     82         JNZ  TV1                        ;NOT "@" ARRAY
003f  13              83     83         INX  D                          ;IT IS THE "@" ARRAY
0040  cd 1a 04        84     84         CALL PARN                       ;@ SHOULD BE FOLLOWED
0043  29              85     85         DAD  H                          ;BY (EXPR) AS ITS INDEX
0044  da 9f 00        86     86         JC   QHOW                       ;IS INDEX TOO BIG?
0047  d5              87     87         PUSH D                          ;WILL IT OVERWRITE
0048  eb              88     88         XCHG                            ;TEXT?
0049  cd 59 04        89     89         CALL SIZE                       ;FIND SIZE OF FREE
004c  e7              90     90         RST  4                          ;AND CHECK THAT
004d  da f7 04        91     91         JC   ASORRY                     ;IF SO, SAY "SORRY"
0050  21 80 09        92     92         LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0053  cd 7c 04        93     93         CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0056  d1              94     94         POP  D                          ;IN HL
0057  c9              95     95         RET                             ;C FLAG IS CLEARED
0058  fe 1b           96     96 TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
005a  3f              97     97         CMC                             ;IF NOT RETURN C FLAG
005b  d8              98     98         RC
005c  13              99     99         INX  D                          ;IF A THROUGH Z
005d  21 80 09       100    100         LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0060  07             101    101         RLC                             ;THAT VARIABLE
0061  85             102    102         ADD  L                          ;AND RETURN IT IN HL
0062  6f             103    103         MOV  L,A                        ;WITH C FLAG CLEARED
0063  3e 00          104    104         MVI  A,0
0065  8c             105    105         ADC  H
0066  67             106    106         MOV  H,A
0067  c9             107    107         RET
                     108    108 ;
                     109    109 ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
                     110    110 ;       RST  5                          ;THIS IS AT LOC. 8
                     111    111 ;       CMP  M                          ;AND THEN JUMP HERE
0068  23             112    112 TC1:    INX  H                          ;COMPARE THE BYTE THAT
0069  ca 73 00       113    113         JZ   TC2                        ;FOLLOWS THE RST INST.
006c  c5             114    114         PUSH B                          ;WITH THE TEXT (DE->)
006d  4e             115    115         MOV  C,M                        ;IF NOT =, ADD THE 2ND
006e  06 00          116    116         MVI  B,0                        ;BYTE THAT FOLLOWS THE
0070  09             117    117         DAD  B                          ;RST TO THE OLD PC
0071  c1             118    118         POP  B                          ;I.E., DO A RELATIVE
0072  1b             119    119         DCX  D                          ;JUMP IF NOT =
0073  13             120    120 TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0074  23             121    121         INX  H                          ;AND CONTINUE
0075  e3             122    122         XTHL
0076  c9             123    123         RET
                     124    124 ;
0077  21 00 00       125    125 TSTNUM: LXI  H,0                        ;*** TSTNUM ***
007a  44             126    126         MOV  B,H                        ;TEST IF THE TEXT IS
007b  ef             127    127         RST  5                          ;A NUMBER
007c  fe 30          128    128 TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
007e  d8             129    129         RC                              ;B AND HL
007f  fe 3a          130    130         CPI  3AH                        ;IF NUMBERS, CONVERT
0081  d0             131    131         RNC                             ;TO BINARY IN HL AND
0082  3e f0          132    132         MVI  A,0F0H                     ;SET B TO # OF DIGITS
0084  a4             133    133         ANA  H                          ;IF H>255, THERE IS NO
0085  c2 9f 00       134    134         JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0088  04             135    135         INR  B                          ;B COUNTS # OF DIGITS
0089  c5             136    136         PUSH B
008a  44             137    137         MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
008b  4d             138    138         MOV  C,L
008c  29             139    139         DAD  H                          ;WHERE 10* IS DONE BY
008d  29             140    140         DAD  H                          ;SHIFT AND ADD
008e  09             141    141         DAD  B
008f  29             142    142         DAD  H
0090  1a             143    143         LDAX D                          ;AND (DIGIT) IS FROM
0091  13             144    144         INX  D                          ;STRIPPING THE ASCII
0092  e6 0f          145    145         ANI  0FH                        ;CODE
0094  85             146    146         ADD  L
0095  6f             147    147         MOV  L,A
0096  3e 00          148    148         MVI  A,0
0098  8c             149    149         ADC  H
0099  67             150    150         MOV  H,A
009a  c1             151    151         POP  B
009b  1a             152    152         LDAX D                          ;DO THIS DIGIT AFTER
009c  f2 7c 00       153    153         JP   TN1                        ;DIGIT. S SAYS OVERFLOW
009f  d5             154    154 QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
00a0  11 a6 00       155    155 AHOW:   LXI  D,HOW
00a3  c3 cd 04       156    156         JMP  ERROR
00a6  48 4f 57 3f    157    157 HOW:    DB   'HOW?'
00aa  0d             158    158         DB   CR
00ab  4f 4b          159    159 OK:     DB   'OK'
00ad  0d             160    160         DB   CR
00ae  57 48 41 54    161    161 WHAT:   DB   'WHAT?'
00b2  3f             161    162
00b3  0d             162    163         DB   CR
00b4  53 4f 52 52    163    164 SORRY:  DB   'SORRY'
00b8  59             163    165
00b9  0d             164    166         DB   CR
                     165    167 ;
                     166    168 ;*************************************************************
                     167    169 ;
                     168    170 ; *** MAIN ***
                     169    171 ;
                     170    172 ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
                     171    173 ; AND STORES IT IN THE MEMORY.
                     172    174 ;
                     173    175 ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
                     174    176 ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
                     175    177 ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
                     176    178 ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
                     177    179 ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
                     178    180 ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
                     179    181 ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
                     180    182 ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
                     181    183 ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
                     182    184 ;
                     183    185 ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
                     184    186 ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
                     185    187 ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
                     186    188 ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
                     187    189 ;
                     188    190 ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
                     189    191 ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
                     190    192 ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
                     191    193 ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
                     192    194 ;
                     193    195 ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
                     194    196 ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
                     195    197 ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
                     196    198 ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
                     197    199 ;
00ba  31 00 0a       198    200 RSTART: LXI  SP,STACK
00bd  cd 0e 00       199    201 ST1:    CALL CRLF                       ;AND JUMP TO HERE
00c0  11 ab 00       200    202         LXI  D,OK                       ;DE->STRING
00c3  97             201    203         SUB  A                          ;A=0
00c4  cd 63 05       202    204         CALL PRTSTG                     ;PRINT STRING UNTIL CR
00c7  21 ce 00       203    205         LXI  H,ST2+1                    ;LITERAL 0
00ca  22 01 08       204    206         SHLD CURRNT                     ;CURRENT->LINE # = 0
00cd  21 00 00       205    207 ST2:    LXI  H,0
00d0  22 09 08       206    208         SHLD LOPVAR
00d3  22 03 08       207    209         SHLD STKGOS
00d6  3e 3e          208    210 ST3:    MVI  A,3EH                      ;PROMPT '>' AND
00d8  cd fd 04       209    211         CALL GETLN                      ;READ A LINE
00db  d5             210    212         PUSH D                          ;DE->END OF LINE
00dc  11 b7 09       211    213         LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
00df  cd 77 00       212    214         CALL TSTNUM                     ;TEST IF IT IS A NUMBER
00e2  ef             213    215         RST  5
00e3  7c             214    216         MOV  A,H                        ;HL=VALUE OF THE # OR
00e4  b5             215    217         ORA  L                          ;0 IF NO # WAS FOUND
00e5  c1             216    218         POP  B                          ;BC->END OF LINE
00e6  ca 32 07       217    219         JZ   DIRECT
00e9  1b             218    220         DCX  D                          ;BACKUP DE AND SAVE
00ea  7c             219    221         MOV  A,H                        ;VALUE OF LINE # THERE
00eb  12             220    222         STAX D
00ec  1b             221    223         DCX  D
00ed  7d             222    224         MOV  A,L
00ee  12             223    225         STAX D
00ef  c5             224    226         PUSH B                          ;BC,DE->BEGIN, END
00f0  d5             225    227         PUSH D
00f1  79             226    228         MOV  A,C
00f2  93             227    229         SUB  E
00f3  f5             228    230         PUSH PSW                        ;A=# OF BYTES IN LINE
00f4  cd 3b 05       229    231         CALL FNDLN                      ;FIND THIS LINE IN SAVE
00f7  d5             230    232         PUSH D                          ;AREA, DE->SAVE AREA
00f8  c2 0b 01       231    233         JNZ  ST4                        ;NZ:NOT FOUND, INSERT
00fb  d5             232    234         PUSH D                          ;Z:FOUND, DELETE IT
00fc  cd 57 05       233    235         CALL FNDNXT                     ;FIND NEXT LINE
                     234    236                                         ;DE->NEXT LINE
00ff  c1             235    237         POP  B                          ;BC->LINE TO BE DELETED
0100  2a 15 08       236    238         LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0103  cd e8 05       237    239         CALL MVUP                       ;MOVE UP TO DELETE
0106  60             238    240         MOV  H,B                        ;TXTUNF->UNFILLED AREA
0107  69             239    241         MOV  L,C
0108  22 15 08       240    242         SHLD TXTUNF                     ;UPDATE
010b  c1             241    243 ST4:    POP  B                          ;GET READY TO INSERT
010c  2a 15 08       242    244         LHLD TXTUNF                     ;BUT FIRST CHECK IF
010f  f1             243    245         POP  PSW                        ;THE LENGTH OF NEW LINE
0110  e5             244    246         PUSH H                          ;IS 3 (LINE # AND CR)
0111  fe 03          245    247         CPI  3                          ;THEN DO NOT INSERT
0113  ca ba 00       246    248         JZ   RSTART                     ;MUST CLEAR THE STACK
0116  85             247    249         ADD  L                          ;COMPUTE NEW TXTUNF
0117  6f             248    250         MOV  L,A
0118  3e 00          249    251         MVI  A,0
011a  8c             250    252         ADC  H
011b  67             251    253         MOV  H,A                        ;HL->NEW UNFILLED AREA
011c  11 80 09       252    254         LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
011f  e7             253    255         RST  4                          ;IS ENOUGH SPACE
0120  d2 f6 04       254    256         JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0123  22 15 08       255    257         SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0126  d1             256    258         POP  D                          ;DE->OLD UNFILLED AREA
0127  cd f1 05       257    259         CALL MVDOWN
012a  d1             258    260         POP  D                          ;DE->BEGIN, HL->END
012b  e1             259    261         POP  H
012c  cd e8 05       260    262         CALL MVUP                       ;MOVE NEW LINE TO SAVE
012f  c3 d6 00       261    263         JMP  ST3                        ;AREA
                     262    264 ;
                     263    265 ;*************************************************************
                     264    266 ;
                     265    267 ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
                     266    268 ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
                     267    269 ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
                     268    270 ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
                     269    271 ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
                     270    272 ;
                     271    273 ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
                     272    274 ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
                     273    275 ; GO BACK TO 'RSTART'.
                     274    276 ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
                     275    277 ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
                     276    278 ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
                     277    279 ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
                     278    280 ;*************************************************************
                     279    281 ;
                     280    282 ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
                     281    283 ;
                     282    284 ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
                     283    285 ;
                     284    286 ; 'STOP(CR)' GOES BACK TO 'RSTART'
                     285    287 ;
                     286    288 ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
                     287    289 ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
                     288    290 ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
                     289    291 ;
                     290    292 ; THERE ARE 3 MORE ENTRIES IN 'RUN':
                     291    293 ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
                     292    294 ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
                     293    295 ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
                     294    296 ;
                     295    297 ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
                     296    298 ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
                     297    299 ;
0132  cd c5 04       298    300 NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0135  21 17 08       299    301         LXI  H,TXTBGN
0138  22 15 08       300    302         SHLD TXTUNF
                     301    303 ;
013b  cd c5 04       302    304 STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
013e  c3 ba 00       303    305         JMP  RSTART
                     304    306 ;
0141  cd c5 04       305    307 RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0144  11 17 08       306    308         LXI  D,TXTBGN                   ;FIRST SAVED LINE
                     307    309 ;
0147  21 00 00       308    310 RUNNXL: LXI  H,0                        ;*** RUNNXL ***
014a  cd 43 05       309    311         CALL FNDLP                      ;FIND WHATEVER LINE #
014d  da ba 00       310    312         JC   RSTART                     ;C:PASSED TXTUNF, QUIT
                     311    313 ;
0150  eb             312    314 RUNTSL: XCHG                            ;*** RUNTSL ***
0151  22 01 08       313    315         SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0154  eb             314    316         XCHG
0155  13             315    317         INX  D                          ;BUMP PASS LINE #
0156  13             316    318         INX  D
                     317    319 ;
0157  cd 7e 06       318    320 RUNSML: CALL CHKIO                      ;*** RUNSML ***
015a  21 b7 06       319    321         LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
015d  c3 35 07       320    322         JMP  EXEC                       ;AND EXECUTE IT
                     321    323 ;
0160  df             322    324 GOTO:   RST  3                          ;*** GOTO EXPR ***
0161  d5             323    325         PUSH D                          ;SAVE FOR ERROR ROUTINE
0162  cd c5 04       324    326         CALL ENDCHK                     ;MUST FIND A CR
0165  cd 3b 05       325    327         CALL FNDLN                      ;FIND THE TARGET LINE
0168  c2 a0 00       326    328         JNZ  AHOW                       ;NO SUCH LINE #
016b  f1             327    329         POP  PSW                        ;CLEAR THE PUSH DE
016c  c3 50 01       328    330         JMP  RUNTSL                     ;GO DO IT
                     329    331 ;
                     330    332 ;*************************************************************
                     331    333 ;
                     332    334 ; *** LIST *** & PRINT ***
                     333    335 ;
                     334    336 ; LIST HAS TWO FORMS:
                     335    337 ; 'LIST(CR)' LISTS ALL SAVED LINES
                     336    338 ; 'LIST #(CR)' START LIST AT THIS LINE #
                     337    339 ; YOU CAN STOP THE LISTING BY CONTROL C KEY
                     338    340 ;
                     339    341 ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
                     340    342 ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
                     341    343 ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
                     342    344 ;
                     343    345 ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
                     344    346 ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
                     345    347 ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
                     346    348 ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
                     347    349 ; SPECIFIED, 6 POSITIONS WILL BE USED.
                     348    350 ;
                     349    351 ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
                     350    352 ; DOUBLE QUOTES.
                     351    353 ;
                     352    354 ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
                     353    355 ;
                     354    356 ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
                     355    357 ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
                     356    358 ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
                     357    359 ;
016f  cd 77 00       358    360 LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0172  cd c5 04       359    361         CALL ENDCHK                     ;IF NO # WE GET A 0
0175  cd 3b 05       360    362         CALL FNDLN                      ;FIND THIS OR NEXT LINE
0178  da ba 00       361    363 LS1:    JC   RSTART                     ;C:PASSED TXTUNF
017b  cd d5 05       362    364         CALL PRTLN                      ;PRINT THE LINE
017e  cd 7e 06       363    365         CALL CHKIO                      ;STOP IF HIT CONTROL-C
0181  cd 43 05       364    366         CALL FNDLP                      ;FIND NEXT LINE
0184  c3 78 01       365    367         JMP  LS1                        ;AND LOOP BACK
                     366    368 ;
0187  0e 06          367    369 PRINT:  MVI  C,6                        ;C = # OF SPACES
0189  cf             368    370         RST  1                          ;IF NULL LIST & ";"
018a  3b             369    371         DB   3BH
018b  06             370    372         DB   PR2-$-1
018c  cd 0e 00       371    373         CALL CRLF                       ;GIVE CR-LF AND
018f  c3 57 01       372    374         JMP  RUNSML                     ;CONTINUE SAME LINE
0192  cf             373    375 PR2:    RST  1                          ;IF NULL LIST (CR)
0193  0d             374    376         DB   CR
0194  06             375    377         DB   PR0-$-1
0195  cd 0e 00       376    378         CALL CRLF                       ;ALSO GIVE CR-LF AND
0198  c3 47 01       377    379         JMP  RUNNXL                     ;GO TO NEXT LINE
019b  cf             378    380 PR0:    RST  1                          ;ELSE IS IT FORMAT?
019c  23             379    381         DB   '#'
019d  05             380    382         DB   PR1-$-1
019e  df             381    383         RST  3                          ;YES, EVALUATE EXPR.
019f  4d             382    384         MOV  C,L                        ;AND SAVE IT IN C
01a0  c3 a9 01       383    385         JMP  PR3                        ;LOOK FOR MORE TO PRINT
01a3  cd 6f 05       384    386 PR1:    CALL QTSTG                      ;OR IS IT A STRING?
01a6  c3 b6 01       385    387         JMP  PR8                        ;IF NOT, MUST BE EXPR.
01a9  cf             386    388 PR3:    RST  1                          ;IF ",", GO FIND NEXT
01aa  2c             387    389         DB   ','
01ab  06             388    390         DB   PR6-$-1
01ac  cd b6 04       389    391         CALL FIN                        ;IN THE LIST.
01af  c3 9b 01       390    392         JMP  PR0                        ;LIST CONTINUES
01b2  cd 0e 00       391    393 PR6:    CALL CRLF                       ;LIST ENDS
01b5  f7             392    394         RST  6
01b6  df             393    395 PR8:    RST  3                          ;EVALUATE THE EXPR
01b7  c5             394    396         PUSH B
01b8  cd 95 05       395    397         CALL PRTNUM                     ;PRINT THE VALUE
01bb  c1             396    398         POP  B
01bc  c3 a9 01       397    399         JMP  PR3                        ;MORE TO PRINT?
                     398    400 ;
                     399    401 ;*************************************************************
                     400    402 ;
                     401    403 ; *** GOSUB *** & RETURN ***
                     402    404 ;
                     403    405 ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
                     404    406 ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
                     405    407 ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
                     406    408 ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
                     407    409 ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
                     408    410 ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
                     409    411 ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
                     410    412 ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
                     411    413 ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
                     412    414 ;
                     413    415 ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
                     414    416 ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
                     415    417 ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
                     416    418 ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
                     417    419 ;
01bf  cd 1c 06       418    420 GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
01c2  df             419    421         RST  3                          ;PARAMETERS
01c3  d5             420    422         PUSH D                          ;AND TEXT POINTER
01c4  cd 3b 05       421    423         CALL FNDLN                      ;FIND THE TARGET LINE
01c7  c2 a0 00       422    424         JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
01ca  2a 01 08       423    425         LHLD CURRNT                     ;FOUND IT, SAVE OLD
01cd  e5             424    426         PUSH H                          ;'CURRNT' OLD 'STKGOS'
01ce  2a 03 08       425    427         LHLD STKGOS
01d1  e5             426    428         PUSH H
01d2  21 00 00       427    429         LXI  H,0                        ;AND LOAD NEW ONES
01d5  22 09 08       428    430         SHLD LOPVAR
01d8  39             429    431         DAD  SP
01d9  22 03 08       430    432         SHLD STKGOS
01dc  c3 50 01       431    433         JMP  RUNTSL                     ;THEN RUN THAT LINE
01df  cd c5 04       432    434 RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
01e2  2a 03 08       433    435         LHLD STKGOS                     ;OLD STACK POINTER
01e5  7c             434    436         MOV  A,H                        ;0 MEANS NOT EXIST
01e6  b5             435    437         ORA  L
01e7  ca c9 04       436    438         JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
01ea  f9             437    439         SPHL                            ;ELSE, RESTORE IT
01eb  e1             438    440         POP  H
01ec  22 03 08       439    441         SHLD STKGOS                     ;AND THE OLD 'STKGOS'
01ef  e1             440    442         POP  H
01f0  22 01 08       441    443         SHLD CURRNT                     ;AND THE OLD 'CURRNT'
01f3  d1             442    444         POP  D                          ;OLD TEXT POINTER
01f4  cd 00 06       443    445         CALL POPA                       ;OLD "FOR" PARAMETERS
01f7  f7             444    446         RST  6                          ;AND WE ARE BACK HOME
                     445    447 ;
                     446    448 ;*************************************************************
                     447    449 ;
                     448    450 ; *** FOR *** & NEXT ***
                     449    451 ;
                     450    452 ; 'FOR' HAS TWO FORMS:
                     451    453 ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
                     452    454 ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
                     453    455 ; EXP3=1.  (I.E., WITH A STEP OF +1.)
                     454    456 ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
                     455    457 ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
                     456    458 ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
                     457    459 ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
                     458    460 ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
                     459    461 ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
                     460    462 ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
                     461    463 ; BEFORE THE NEW ONE OVERWRITES IT.
                     462    464 ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
                     463    465 ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
                     464    466 ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
                     465    467 ; (PURGED FROM THE STACK..)
                     466    468 ;
                     467    469 ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
                     468    470 ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
                     469    471 ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
                     470    472 ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
                     471    473 ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
                     472    474 ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
                     473    475 ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
                     474    476 ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
                     475    477 ; IS PURGED AND EXECUTION CONTINUES.
                     476    478 ;
01f8  cd 1c 06       477    479 FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
01fb  cd a3 04       478    480         CALL SETVAL                     ;SET THE CONTROL VAR.
01fe  2b             479    481         DCX  H                          ;HL IS ITS ADDRESS
01ff  22 09 08       480    482         SHLD LOPVAR                     ;SAVE THAT
0202  21 0d 07       481    483         LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0205  c3 35 07       482    484         JMP  EXEC                       ;FOR THE WORD 'TO'
0208  df             483    485 FR1:    RST  3                          ;EVALUATE THE LIMIT
0209  22 0d 08       484    486         SHLD LOPLMT                     ;SAVE THAT
020c  21 13 07       485    487         LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
020f  c3 35 07       486    488         JMP EXEC                        ;FOR THE WORD 'STEP'
0212  df             487    489 FR2:    RST  3                          ;FOUND IT, GET STEP
0213  c3 19 02       488    490         JMP  FR4
0216  21 01 00       489    491 FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0219  22 0b 08       490    492 FR4:    SHLD LOPINC                     ;SAVE THAT TOO
021c  2a 01 08       491    493 FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
021f  22 0f 08       492    494         SHLD LOPLN
0222  eb             493    495         XCHG                            ;AND TEXT POINTER
0223  22 11 08       494    496         SHLD LOPPT
0226  01 0a 00       495    497         LXI  B,0AH                      ;DIG INTO STACK TO
0229  2a 09 08       496    498         LHLD LOPVAR                     ;FIND 'LOPVAR'
022c  eb             497    499         XCHG
022d  60             498    500         MOV  H,B
022e  68             499    501         MOV  L,B                        ;HL=0 NOW
022f  39             500    502         DAD  SP                         ;HERE IS THE STACK
0230  3e             501    503         DB   3EH
0231  09             502    504 FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0232  7e             503    505         MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0233  23             504    506         INX  H
0234  b6             505    507         ORA  M
0235  ca 52 02       506    508         JZ   FR8                        ;0 SAYS NO MORE IN IT
0238  7e             507    509         MOV  A,M
0239  2b             508    510         DCX  H
023a  ba             509    511         CMP  D                          ;SAME AS THIS ONE?
023b  c2 31 02       510    512         JNZ  FR7
023e  7e             511    513         MOV  A,M                        ;THE OTHER HALF?
023f  bb             512    514         CMP  E
0240  c2 31 02       513    515         JNZ  FR7
0243  eb             514    516         XCHG                            ;YES, FOUND ONE
0244  21 00 00       515    517         LXI  H,0H
0247  39             516    518         DAD  SP                         ;TRY TO MOVE SP
0248  44             517    519         MOV  B,H
0249  4d             518    520         MOV  C,L
024a  21 0a 00       519    521         LXI  H,0AH
024d  19             520    522         DAD  D
024e  cd f1 05       521    523         CALL MVDOWN                     ;AND PURGE 10 WORDS
0251  f9             522    524         SPHL                            ;IN THE STACK
0252  2a 11 08       523    525 FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0255  eb             524    526         XCHG
0256  f7             525    527         RST  6                          ;AND CONTINUE
                     526    528 ;
0257  ff             527    529 NEXT:   RST  7                          ;GET ADDRESS OF VAR.
0258  da c9 04       528    530         JC   QWHAT                      ;NO VARIABLE, "WHAT?"
025b  22 05 08       529    531         SHLD VARNXT                     ;YES, SAVE IT
025e  d5             530    532 NX0:    PUSH D                          ;SAVE TEXT POINTER
025f  eb             531    533         XCHG
0260  2a 09 08       532    534         LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0263  7c             533    535         MOV  A,H
0264  b5             534    536         ORA  L                          ;0 SAYS NEVER HAD ONE
0265  ca ca 04       535    537         JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0268  e7             536    538         RST  4                          ;ELSE WE CHECK THEM
0269  ca 76 02       537    539         JZ   NX3                        ;OK, THEY AGREE
026c  d1             538    540         POP  D                          ;NO, LET'S SEE
026d  cd 00 06       539    541         CALL POPA                       ;PURGE CURRENT LOOP
0270  2a 05 08       540    542         LHLD VARNXT                     ;AND POP ONE LEVEL
0273  c3 5e 02       541    543         JMP  NX0                        ;GO CHECK AGAIN
0276  5e             542    544 NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0277  23             543    545         INX  H
0278  56             544    546         MOV  D,M                        ;DE=VALUE OF VAR.
0279  2a 0b 08       545    547         LHLD LOPINC
027c  e5             546    548         PUSH H
027d  7c             547    549         MOV  A,H
027e  aa             548    550         XRA  D
027f  7a             549    551         MOV  A,D
0280  19             550    552         DAD  D                          ;ADD ONE STEP
0281  fa 88 02       551    553         JM   NX4
0284  ac             552    554         XRA  H
0285  fa aa 02       553    555         JM   NX5
0288  eb             554    556 NX4:    XCHG
0289  2a 09 08       555    557         LHLD LOPVAR                     ;PUT IT BACK
028c  73             556    558         MOV  M,E
028d  23             557    559         INX  H
028e  72             558    560         MOV  M,D
028f  2a 0d 08       559    561         LHLD LOPLMT                     ;HL->LIMIT
0292  f1             560    562         POP  PSW                        ;OLD HL
0293  b7             561    563         ORA  A
0294  f2 98 02       562    564         JP   NX1                        ;STEP > 0
0297  eb             563    565         XCHG                            ;STEP < 0
0298  cd 9b 04       564    566 NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
029b  d1             565    567         POP  D                          ;RESTORE TEXT POINTER
029c  da ac 02       566    568         JC   NX2                        ;OUTSIDE LIMIT
029f  2a 0f 08       567    569         LHLD LOPLN                      ;WITHIN LIMIT, GO
02a2  22 01 08       568    570         SHLD CURRNT                     ;BACK TO THE SAVED
02a5  2a 11 08       569    571         LHLD LOPPT                      ;'CURRNT' AND TEXT
02a8  eb             570    572         XCHG                            ;POINTER
02a9  f7             571    573         RST  6
02aa  e1             572    574 NX5:    POP  H
02ab  d1             573    575         POP  D
02ac  cd 00 06       574    576 NX2:    CALL POPA                       ;PURGE THIS LOOP
02af  f7             575    577         RST  6
                     576    578 ;
                     577    579 ;*************************************************************
                     578    580 ;
                     579    581 ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
                     580    582 ;
                     581    583 ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
                     582    584 ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
                     583    585 ;
                     584    586 ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
                     585    587 ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
                     586    588 ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
                     587    589 ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
                     588    590 ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
                     589    591 ; EXECUTION CONTINUES AT THE NEXT LINE.
                     590    592 ;
                     591    593 ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
                     592    594 ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
                     593    595 ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
                     594    596 ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
                     595    597 ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
                     596    598 ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
                     597    599 ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
                     598    600 ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
                     599    601 ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
                     600    602 ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
                     601    603 ;
                     602    604 ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
                     603    605 ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
                     604    606 ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
                     605    607 ; THIS IS HANDLED IN 'INPERR'.
                     606    608 ;
                     607    609 ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
                     608    610 ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
                     609    611 ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
                     610    612 ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
                     611    613 ; THIS IS DONE BY 'DEFLT'.
                     612    614 ;
02b0  21 00 00       613    615 REM:    LXI  H,0H                       ;*** REM ***
02b3  3e             614    616         DB   3EH                        ;THIS IS LIKE 'IF 0'
                     615    617 ;
02b4  df             616    618 IFF:    RST  3                          ;*** IF ***
02b5  7c             617    619         MOV  A,H                        ;IS THE EXPR.=0?
02b6  b5             618    620         ORA  L
02b7  c2 57 01       619    621         JNZ  RUNSML                     ;NO, CONTINUE
02ba  cd 59 05       620    622         CALL FNDSKP                     ;YES, SKIP REST OF LINE
02bd  d2 50 01       621    623         JNC  RUNTSL                     ;AND RUN THE NEXT LINE
02c0  c3 ba 00       622    624         JMP  RSTART                     ;IF NO NEXT, RE-START
                     623    625 ;
02c3  2a 07 08       624    626 INPERR: LHLD STKINP                     ;*** INPERR ***
02c6  f9             625    627         SPHL                            ;RESTORE OLD SP
02c7  e1             626    628         POP  H                          ;AND OLD 'CURRNT'
02c8  22 01 08       627    629         SHLD CURRNT
02cb  d1             628    630         POP  D                          ;AND OLD TEXT POINTER
02cc  d1             629    631         POP  D                          ;REDO INPUT
                     630    632 ;
02cd                 631    633 INPUT:                                  ;*** INPUT ***
02cd  d5             632    634 IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
02ce  cd 6f 05       633    635         CALL QTSTG                      ;IS NEXT ITEM A STRING?
02d1  c3 db 02       634    636         JMP  IP2                        ;NO
02d4  ff             635    637         RST  7                          ;YES, BUT FOLLOWED BY A
02d5  da 15 03       636    638         JC   IP4                        ;VARIABLE?   NO.
02d8  c3 eb 02       637    639         JMP  IP3                        ;YES.  INPUT VARIABLE
02db  d5             638    640 IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
02dc  ff             639    641         RST  7                          ;MUST BE VARIABLE NOW
02dd  da c9 04       640    642         JC   QWHAT                      ;"WHAT?" IT IS NOT?
02e0  1a             641    643         LDAX D                          ;GET READY FOR 'PRTSTR'
02e1  4f             642    644         MOV  C,A
02e2  97             643    645         SUB  A
02e3  12             644    646         STAX D
02e4  d1             645    647         POP  D
02e5  cd 63 05       646    648         CALL PRTSTG                     ;PRINT STRING AS PROMPT
02e8  79             647    649         MOV  A,C                        ;RESTORE TEXT
02e9  1b             648    650         DCX  D
02ea  12             649    651         STAX D
02eb  d5             650    652 IP3:    PUSH D                          ;SAVE TEXT POINTER
02ec  eb             651    653         XCHG
02ed  2a 01 08       652    654         LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
02f0  e5             653    655         PUSH H
02f1  21 cd 02       654    656         LXI  H,IP1                      ;A NEGATIVE NUMBER
02f4  22 01 08       655    657         SHLD CURRNT                     ;AS A FLAG
02f7  21 00 00       656    658         LXI  H,0H                       ;SAVE SP TOO
02fa  39             657    659         DAD  SP
02fb  22 07 08       658    660         SHLD STKINP
02fe  d5             659    661         PUSH D                          ;OLD HL
02ff  3e 3a          660    662         MVI  A,3AH                      ;PRINT THIS TOO
0301  cd fd 04       661    663         CALL GETLN                      ;AND GET A LINE
0304  11 b7 09       662    664         LXI  D,BUFFER                   ;POINTS TO BUFFER
0307  df             663    665         RST  3                          ;EVALUATE INPUT
0308  00             664    666         NOP                             ;CAN BE 'CALL ENDCHK'
0309  00             665    667         NOP
030a  00             666    668         NOP
030b  d1             667    669         POP  D                          ;OK, GET OLD HL
030c  eb             668    670         XCHG
030d  73             669    671         MOV  M,E                        ;SAVE VALUE IN VAR.
030e  23             670    672         INX  H
030f  72             671    673         MOV  M,D
0310  e1             672    674         POP  H                          ;GET OLD 'CURRNT'
0311  22 01 08       673    675         SHLD CURRNT
0314  d1             674    676         POP  D                          ;AND OLD TEXT POINTER
0315  f1             675    677 IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0316  cf             676    678         RST  1                          ;IS NEXT CH. ','?
0317  2c             677    679         DB   ','
0318  03             678    680         DB   IP5-$-1
0319  c3 cd 02       679    681         JMP  IP1                        ;YES, MORE ITEMS.
031c  f7             680    682 IP5:    RST  6
                     681    683 ;
031d  1a             682    684 DEFLT:  LDAX D                          ;***  DEFLT ***
031e  fe 0d          683    685         CPI  CR                         ;EMPTY LINE IS OK
0320  ca 2c 03       684    686         JZ   LT1                        ;ELSE IT IS 'LET'
                     685    687 ;
0323  cd a3 04       686    688 LET:    CALL SETVAL                     ;*** LET ***
0326  cf             687    689         RST  1                          ;SET VALUE TO VAR.
0327  2c             688    690         DB   ','
0328  03             689    691         DB   LT1-$-1
0329  c3 23 03       690    692         JMP  LET                        ;ITEM BY ITEM
032c  f7             691    693 LT1:    RST  6                          ;UNTIL FINISH
                     692    694 ;
                     693    695 ;*************************************************************
                     694    696 ;
                     695    697 ; *** EXPR ***
                     696    698 ;
                     697    699 ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
                     698    700 ; <EXPR>::<EXPR2>
                     699    701 ;         <EXPR2><REL.OP.><EXPR2>
                     700    702 ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
                     701    703 ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
                     702    704 ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
                     703    705 ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
                     704    706 ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
                     705    707 ; <EXPR4>::=<VARIABLE>
                     706    708 ;           <FUNCTION>
                     707    709 ;           (<EXPR>)
                     708    710 ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
                     709    711 ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
                     710    712 ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
                     711    713 ;
                     712    714 ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
                     713    715 ;       PUSH H                          ;SAVE <EXPR2> VALUE
032d  21 1b 07       714    716 EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0330  c3 35 07       715    717         JMP  EXEC                       ;GO DO IT
0333  cd 5c 03       716    718 XP11:   CALL XP18                       ;REL.OP.">="
0336  d8             717    719         RC                              ;NO, RETURN HL=0
0337  6f             718    720         MOV  L,A                        ;YES, RETURN HL=1
0338  c9             719    721         RET
0339  cd 5c 03       720    722 XP12:   CALL XP18                       ;REL.OP."#"
033c  c8             721    723         RZ                              ;FALSE, RETURN HL=0
033d  6f             722    724         MOV  L,A                        ;TRUE, RETURN HL=1
033e  c9             723    725         RET
033f  cd 5c 03       724    726 XP13:   CALL XP18                       ;REL.OP.">"
0342  c8             725    727         RZ                              ;FALSE
0343  d8             726    728         RC                              ;ALSO FALSE, HL=0
0344  6f             727    729         MOV  L,A                        ;TRUE, HL=1
0345  c9             728    730         RET
0346  cd 5c 03       729    731 XP14:   CALL XP18                       ;REL.OP."<="
0349  6f             730    732         MOV  L,A                        ;SET HL=1
034a  c8             731    733         RZ                              ;REL. TRUE, RETURN
034b  d8             732    734         RC
034c  6c             733    735         MOV  L,H                        ;ELSE SET HL=0
034d  c9             734    736         RET
034e  cd 5c 03       735    737 XP15:   CALL XP18                       ;REL.OP."="
0351  c0             736    738         RNZ                             ;FALSE, RETURN HL=0
0352  6f             737    739         MOV  L,A                        ;ELSE SET HL=1
0353  c9             738    740         RET
0354  cd 5c 03       739    741 XP16:   CALL XP18                       ;REL.OP."<"
0357  d0             740    742         RNC                             ;FALSE, RETURN HL=0
0358  6f             741    743         MOV  L,A                        ;ELSE SET HL=1
0359  c9             742    744         RET
035a  e1             743    745 XP17:   POP  H                          ;NOT .REL.OP
035b  c9             744    746         RET                             ;RETURN HL=<EXPR2>
035c  79             745    747 XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
035d  e1             746    748         POP  H                          ;REL.OP.'S
035e  c1             747    749         POP  B
035f  e5             748    750         PUSH H                          ;REVERSE TOP OF STACK
0360  c5             749    751         PUSH B
0361  4f             750    752         MOV  C,A
0362  cd 71 03       751    753         CALL EXPR2                      ;GET 2ND <EXPR2>
0365  eb             752    754         XCHG                            ;VALUE IN DE NOW
0366  e3             753    755         XTHL                            ;1ST <EXPR2> IN HL
0367  cd 9b 04       754    756         CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
036a  d1             755    757         POP  D                          ;RESTORE TEXT POINTER
036b  21 00 00       756    758         LXI  H,0H                       ;SET HL=0, A=1
036e  3e 01          757    759         MVI  A,1
0370  c9             758    760         RET
                     759    761 ;
0371  cf             760    762 EXPR2:  RST  1                          ;NEGATIVE SIGN?
0372  2d             761    763         DB   '-'
0373  06             762    764         DB   XP21-$-1
0374  21 00 00       763    765         LXI  H,0H                       ;YES, FAKE '0-'
0377  c3 9b 03       764    766         JMP  XP26                       ;TREAT LIKE SUBTRACT
037a  cf             765    767 XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
037b  2b             766    768         DB   '+'
037c  00             767    769         DB   XP22-$-1
037d  cd a5 03       768    770 XP22:   CALL EXPR3                      ;1ST <EXPR3>
0380  cf             769    771 XP23:   RST  1                          ;ADD?
0381  2b             770    772         DB   '+'
0382  15             771    773         DB   XP25-$-1
0383  e5             772    774         PUSH H                          ;YES, SAVE VALUE
0384  cd a5 03       773    775         CALL EXPR3                      ;GET 2ND <EXPR3>
0387  eb             774    776 XP24:   XCHG                            ;2ND IN DE
0388  e3             775    777         XTHL                            ;1ST IN HL
0389  7c             776    778         MOV  A,H                        ;COMPARE SIGN
038a  aa             777    779         XRA  D
038b  7a             778    780         MOV  A,D
038c  19             779    781         DAD  D
038d  d1             780    782         POP  D                          ;RESTORE TEXT POINTER
038e  fa 80 03       781    783         JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0391  ac             782    784         XRA  H                          ;1ST AND 2ND SIGN EQUAL
0392  f2 80 03       783    785         JP   XP23                       ;SO IS RESULT
0395  c3 9f 00       784    786         JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0398  cf             785    787 XP25:   RST  1                          ;SUBTRACT?
0399  2d             786    788         DB   '-'
039a  86             787    789         DB   XP42-$-1
039b  e5             788    790 XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
039c  cd a5 03       789    791         CALL EXPR3                      ;GET 2ND <EXPR3>
039f  cd 86 04       790    792         CALL CHGSGN                     ;NEGATE
03a2  c3 87 03       791    793         JMP  XP24                       ;AND ADD THEM
                     792    794 ;
03a5  cd 05 04       793    795 EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
03a8  cf             794    796 XP31:   RST  1                          ;MULTIPLY?
03a9  2a             795    797         DB   '*'
03aa  2d             796    798         DB   XP34-$-1
03ab  e5             797    799         PUSH H                          ;YES, SAVE 1ST
03ac  cd 05 04       798    800         CALL EXPR4                      ;AND GET 2ND <EXPR4>
03af  06 00          799    801         MVI  B,0H                       ;CLEAR B FOR SIGN
03b1  cd 83 04       800    802         CALL CHKSGN                     ;CHECK SIGN
03b4  e3             801    803         XTHL                            ;1ST IN HL
03b5  cd 83 04       802    804         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03b8  eb             803    805         XCHG
03b9  e3             804    806         XTHL
03ba  7c             805    807         MOV  A,H                        ;IS HL > 255 ?
03bb  b7             806    808         ORA  A
03bc  ca c5 03       807    809         JZ   XP32                       ;NO
03bf  7a             808    810         MOV  A,D                        ;YES, HOW ABOUT DE
03c0  b2             809    811         ORA  D
03c1  eb             810    812         XCHG                            ;PUT SMALLER IN HL
03c2  c2 a0 00       811    813         JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
03c5  7d             812    814 XP32:   MOV  A,L                        ;THIS IS DUMB
03c6  21 00 00       813    815         LXI  H,0H                       ;CLEAR RESULT
03c9  b7             814    816         ORA  A                          ;ADD AND COUNT
03ca  ca f7 03       815    817         JZ   XP35
03cd  19             816    818 XP33:   DAD  D
03ce  da a0 00       817    819         JC   AHOW                       ;OVERFLOW
03d1  3d             818    820         DCR  A
03d2  c2 cd 03       819    821         JNZ  XP33
03d5  c3 f7 03       820    822         JMP  XP35                       ;FINISHED
03d8  cf             821    823 XP34:   RST  1                          ;DIVIDE?
03d9  2f             822    824         DB   '/'
03da  46             823    825         DB   XP42-$-1
03db  e5             824    826         PUSH H                          ;YES, SAVE 1ST <EXPR4>
03dc  cd 05 04       825    827         CALL EXPR4                      ;AND GET THE SECOND ONE
03df  06 00          826    828         MVI  B,0H                       ;CLEAR B FOR SIGN
03e1  cd 83 04       827    829         CALL CHKSGN                     ;CHECK SIGN OF 2ND
03e4  e3             828    830         XTHL                            ;GET 1ST IN HL
03e5  cd 83 04       829    831         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03e8  eb             830    832         XCHG
03e9  e3             831    833         XTHL
03ea  eb             832    834         XCHG
03eb  7a             833    835         MOV  A,D                        ;DIVIDE BY 0?
03ec  b3             834    836         ORA  E
03ed  ca a0 00       835    837         JZ   AHOW                       ;SAY "HOW?"
03f0  c5             836    838         PUSH B                          ;ELSE SAVE SIGN
03f1  cd 66 04       837    839         CALL DIVIDE                     ;USE SUBROUTINE
03f4  60             838    840         MOV  H,B                        ;RESULT IN HL NOW
03f5  69             839    841         MOV  L,C
03f6  c1             840    842         POP  B                          ;GET SIGN BACK
03f7  d1             841    843 XP35:   POP  D                          ;AND TEXT POINTER
03f8  7c             842    844         MOV  A,H                        ;HL MUST BE +
03f9  b7             843    845         ORA  A
03fa  fa 9f 00       844    846         JM   QHOW                       ;ELSE IT IS OVERFLOW
03fd  78             845    847         MOV  A,B
03fe  b7             846    848         ORA  A
03ff  fc 86 04       847    849         CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0402  c3 a8 03       848    850         JMP  XP31                       ;LOOK FOR MORE TERMS
                     849    851 ;
0405  21 fb 06       850    852 EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0408  c3 35 07       851    853         JMP  EXEC                       ;AND GO DO IT
040b  ff             852    854 XP40:   RST  7                          ;NO, NOT A FUNCTION
040c  da 14 04       853    855         JC   XP41                       ;NOR A VARIABLE
040f  7e             854    856         MOV  A,M                        ;VARIABLE
0410  23             855    857         INX  H
0411  66             856    858         MOV  H,M                        ;VALUE IN HL
0412  6f             857    859         MOV  L,A
0413  c9             858    860         RET
0414  cd 77 00       859    861 XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0417  78             860    862         MOV  A,B                        ;# OF DIGIT
0418  b7             861    863         ORA  A
0419  c0             862    864         RNZ                             ;OK
041a  cf             863    865 PARN:   RST  1
041b  28             864    866         DB   '('
041c  05             865    867         DB   XP43-$-1
041d  df             866    868         RST  3                          ;"(EXPR)"
041e  cf             867    869         RST  1
041f  29             868    870         DB   ')'
0420  01             869    871         DB   XP43-$-1
0421  c9             870    872 XP42:   RET
0422  c3 c9 04       871    873 XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
                     872    874 ;
0425  cd 1a 04       873    875 RND:    CALL PARN                       ;*** RND(EXPR) ***
0428  7c             874    876         MOV  A,H                        ;EXPR MUST BE +
0429  b7             875    877         ORA  A
042a  fa 9f 00       876    878         JM   QHOW
042d  b5             877    879         ORA  L                          ;AND NON-ZERO
042e  ca 9f 00       878    880         JZ   QHOW
0431  d5             879    881         PUSH D                          ;SAVE BOTH
0432  e5             880    882         PUSH H
0433  2a 13 08       881    883         LHLD RANPNT                     ;GET MEMORY AS RANDOM
0436  11 63 07       882    884         LXI  D,LSTROM                   ;NUMBER
0439  e7             883    885         RST  4
043a  da 40 04       884    886         JC   RA1                        ;WRAP AROUND IF LAST
043d  21 00 00       885    887         LXI  H,START
0440  5e             886    888 RA1:    MOV  E,M
0441  23             887    889         INX  H
0442  56             888    890         MOV  D,M
0443  22 13 08       889    891         SHLD RANPNT
0446  e1             890    892         POP  H
0447  eb             891    893         XCHG
0448  c5             892    894         PUSH B
0449  cd 66 04       893    895         CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
044c  c1             894    896         POP  B
044d  d1             895    897         POP  D
044e  23             896    898         INX  H
044f  c9             897    899         RET
                     898    900 ;
0450  cd 1a 04       899    901 ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0453  1b             900    902         DCX  D
0454  cd 83 04       901    903         CALL CHKSGN                     ;CHECK SIGN
0457  13             902    904         INX  D
0458  c9             903    905         RET
                     904    906 ;
0459  2a 15 08       905    907 SIZE:   LHLD TXTUNF                     ;*** SIZE ***
045c  d5             906    908         PUSH D                          ;GET THE NUMBER OF FREE
045d  eb             907    909         XCHG                            ;BYTES BETWEEN 'TXTUNF'
045e  21 80 09       908    910         LXI  H,VARBGN                   ;AND 'VARBGN'
0461  cd 7c 04       909    911         CALL SUBDE
0464  d1             910    912         POP  D
0465  c9             911    913         RET
                     912    914 ;
                     913    915 ;*************************************************************
                     914    916 ;
                     915    917 ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
                     916    918 ;
                     917    919 ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
                     918    920 ;
                     919    921 ; 'SUBDE' SUBSTRACTS DE FROM HL
                     920    922 ;
                     921    923 ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
                     922    924 ; SIGN AND FLIP SIGN OF B.
                     923    925 ;
                     924    926 ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
                     925    927 ;
                     926    928 ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
                     927    929 ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
                     928    930 ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
                     929    931 ;
0466  e5             930    932 DIVIDE: PUSH H                          ;*** DIVIDE ***
0467  6c             931    933         MOV  L,H                        ;DIVIDE H BY DE
0468  26 00          932    934         MVI  H,0
046a  cd 71 04       933    935         CALL DV1
046d  41             934    936         MOV  B,C                        ;SAVE RESULT IN B
046e  7d             935    937         MOV  A,L                        ;(REMINDER+L)/DE
046f  e1             936    938         POP  H
0470  67             937    939         MOV  H,A
0471  0e ff          938    940 DV1:    MVI  C,0FFH                     ;RESULT IN C
0473  0c             939    941 DV2:    INR  C                          ;DUMB ROUTINE
0474  cd 7c 04       940    942         CALL SUBDE                      ;DIVIDE BY SUBTRACT
0477  d2 73 04       941    943         JNC  DV2                        ;AND COUNT
047a  19             942    944         DAD  D
047b  c9             943    945         RET
                     944    946 ;
047c  7d             945    947 SUBDE:  MOV  A,L                        ;*** SUBDE ***
047d  93             946    948         SUB  E                          ;SUBSTRACT DE FROM
047e  6f             947    949         MOV  L,A                        ;HL
047f  7c             948    950         MOV  A,H
0480  9a             949    951         SBB  D
0481  67             950    952         MOV  H,A
0482  c9             951    953         RET
                     952    954 ;
0483  7c             953    955 CHKSGN: MOV  A,H                        ;*** CHKSGN ***
0484  b7             954    956         ORA  A                          ;CHECK SIGN OF HL
0485  f0             955    957         RP                              ;IF -, CHANGE SIGN
                     956    958 ;
0486  7c             957    959 CHGSGN: MOV  A,H                        ;*** CHGSGN ***
0487  b5             958    960         ORA  L                          ;*UM*
0488  c8             959    961         RZ                              ;*UM* NOT ON ZERO VALUE
0489  7c             960    962         MOV  A,H                        ;*UM*
048a  f5             961    963         PUSH PSW
048b  2f             962    964         CMA                             ;CHANGE SIGN OF HL
048c  67             963    965         MOV  H,A
048d  7d             964    966         MOV  A,L
048e  2f             965    967         CMA
048f  6f             966    968         MOV  L,A
0490  23             967    969         INX  H
0491  f1             968    970         POP  PSW
0492  ac             969    971         XRA  H
0493  f2 9f 00       970    972         JP   QHOW
0496  78             971    973         MOV  A,B                        ;AND ALSO FLIP B
0497  ee 80          972    974         XRI  80H
0499  47             973    975         MOV  B,A
049a  c9             974    976         RET
                     975    977 ;
049b  7c             976    978 CKHLDE: MOV  A,H
049c  aa             977    979         XRA  D                          ;SAME SIGN?
049d  f2 a1 04       978    980         JP   CK1                        ;YES, COMPARE
04a0  eb             979    981         XCHG                            ;NO, XCH AND COMP
04a1  e7             980    982 CK1:    RST  4
04a2  c9             981    983         RET
                     982    984 ;
                     983    985 ;*************************************************************
                     984    986 ;
                     985    987 ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
                     986    988 ;
                     987    989 ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
                     988    990 ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
                     989    991 ; TO THAT VALUE.
                     990    992 ;
                     991    993 ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
                     992    994 ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
                     993    995 ; NEXT LINE AND CONTINUE FROM THERE.
                     994    996 ;
                     995    997 ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
                     996    998 ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
                     997    999 ;
                     998   1000 ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
                     999   1001 ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
                    1000   1002 ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
                    1001   1003 ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
                    1002   1004 ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
                    1003   1005 ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
                    1004   1006 ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
                    1005   1007 ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
                    1006   1008 ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
                    1007   1009 ;
                    1008   1010 ; RELATED TO 'ERROR' ARE THE FOLLOWING:
                    1009   1011 ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
                    1010   1012 ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
                    1011   1013 ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
                    1012   1014 ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
                    1013   1015 ;
04a3  ff            1014   1016 SETVAL: RST  7                          ;*** SETVAL ***
04a4  da c9 04      1015   1017         JC   QWHAT                      ;"WHAT?" NO VARIABLE
04a7  e5            1016   1018         PUSH H                          ;SAVE ADDRESS OF VAR.
04a8  cf            1017   1019         RST  1                          ;PASS "=" SIGN
04a9  3d            1018   1020         DB   '='
04aa  08            1019   1021         DB   SV1-$-1
04ab  df            1020   1022         RST  3                          ;EVALUATE EXPR.
04ac  44            1021   1023         MOV  B,H                        ;VALUE IS IN BC NOW
04ad  4d            1022   1024         MOV  C,L
04ae  e1            1023   1025         POP  H                          ;GET ADDRESS
04af  71            1024   1026         MOV  M,C                        ;SAVE VALUE
04b0  23            1025   1027         INX  H
04b1  70            1026   1028         MOV  M,B
04b2  c9            1027   1029         RET
04b3  c3 c9 04      1028   1030 SV1:    JMP  QWHAT                      ;NO "=" SIGN
                    1029   1031 ;
04b6  cf            1030   1032 FIN:    RST  1                          ;*** FIN ***
04b7  3b            1031   1033         DB   3BH
04b8  04            1032   1034         DB   FI1-$-1
04b9  f1            1033   1035         POP  PSW                        ;";", PURGE RET. ADDR.
04ba  c3 57 01      1034   1036         JMP  RUNSML                     ;CONTINUE SAME LINE
04bd  cf            1035   1037 FI1:    RST  1                          ;NOT ";", IS IT CR?
04be  0d            1036   1038         DB   CR
04bf  04            1037   1039         DB   FI2-$-1
04c0  f1            1038   1040         POP  PSW                        ;YES, PURGE RET. ADDR.
04c1  c3 47 01      1039   1041         JMP  RUNNXL                     ;RUN NEXT LINE
04c4  c9            1040   1042 FI2:    RET                             ;ELSE RETURN TO CALLER
                    1041   1043 ;
04c5  ef            1042   1044 ENDCHK: RST  5                          ;*** ENDCHK ***
04c6  fe 0d         1043   1045         CPI  CR                         ;END WITH CR?
04c8  c8            1044   1046         RZ                              ;OK, ELSE SAY: "WHAT?"
                    1045   1047 ;
04c9  d5            1046   1048 QWHAT:  PUSH D                          ;*** QWHAT ***
04ca  11 ae 00      1047   1049 AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
04cd  97            1048   1050 ERROR:  SUB  A                          ;*** ERROR ***
04ce  cd 63 05      1049   1051         CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
04d1  d1            1050   1052         POP  D                          ;OR 'SORRY'
04d2  1a            1051   1053         LDAX D                          ;SAVE THE CHARACTER
04d3  f5            1052   1054         PUSH PSW                        ;AT WHERE OLD DE ->
04d4  97            1053   1055         SUB  A                          ;AND PUT A 0 THERE
04d5  12            1054   1056         STAX D
04d6  2a 01 08      1055   1057         LHLD CURRNT                     ;GET CURRENT LINE #
04d9  e5            1056   1058         PUSH H
04da  7e            1057   1059         MOV  A,M                        ;CHECK THE VALUE
04db  23            1058   1060         INX  H
04dc  b6            1059   1061         ORA  M
04dd  d1            1060   1062         POP  D
04de  ca ba 00      1061   1063         JZ   RSTART                     ;IF ZERO, JUST RESTART
04e1  7e            1062   1064         MOV  A,M                        ;IF NEGATIVE,
04e2  b7            1063   1065         ORA  A
04e3  fa c3 02      1064   1066         JM   INPERR                     ;REDO INPUT
04e6  cd d5 05      1065   1067         CALL PRTLN                      ;ELSE PRINT THE LINE
04e9  1b            1066   1068         DCX  D                          ;UPTO WHERE THE 0 IS
04ea  f1            1067   1069         POP  PSW                        ;RESTORE THE CHARACTER
04eb  12            1068   1070         STAX D
04ec  3e 3f         1069   1071         MVI  A,3FH                      ;PRINT A "?"
04ee  d7            1070   1072         RST  2
04ef  97            1071   1073         SUB  A                          ;AND THE REST OF THE
04f0  cd 63 05      1072   1074         CALL PRTSTG                     ;LINE
04f3  c3 ba 00      1073   1075         JMP  RSTART                     ;THEN RESTART
                    1074   1076 ;
04f6  d5            1075   1077 QSORRY: PUSH D                          ;*** QSORRY ***
04f7  11 b4 00      1076   1078 ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
04fa  c3 cd 04      1077   1079         JMP  ERROR
                    1078   1080 ;
                    1079   1081 ;*************************************************************
                    1080   1082 ;
                    1081   1083 ; *** GETLN *** FNDLN (& FRIENDS) ***
                    1082   1084 ;
                    1083   1085 ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
                    1084   1086 ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
                    1085   1087 ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
                    1086   1088 ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
                    1087   1089 ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
                    1088   1090 ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
                    1089   1091 ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
                    1090   1092 ;
                    1091   1093 ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
                    1092   1094 ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
                    1093   1095 ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
                    1094   1096 ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
                    1095   1097 ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
                    1096   1098 ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
                    1097   1099 ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
                    1098   1100 ; LINE, FLAGS ARE C & NZ.
                    1099   1101 ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
                    1100   1102 ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
                    1101   1103 ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
                    1102   1104 ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
                    1103   1105 ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
                    1104   1106 ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
                    1105   1107 ;
04fd  d7            1106   1108 GETLN:  RST  2                          ;*** GETLN ***
04fe  11 b7 09      1107   1109         LXI  D,BUFFER                   ;PROMPT AND INIT.
0501  cd 7e 06      1108   1110 GL1:    CALL CHKIO                      ;CHECK KEYBOARD
0504  ca 01 05      1109   1111         JZ   GL1                        ;NO INPUT, WAIT
0507  fe 7f         1110   1112         CPI  7FH                        ;DELETE LAST CHARACTER?
0509  ca 26 05      1111   1113         JZ   GL3                        ;YES
050c  d7            1112   1114         RST  2                          ;INPUT, ECHO BACK
050d  fe 0a         1113   1115         CPI  0AH                        ;IGNORE LF
050f  ca 01 05      1114   1116         JZ   GL1
0512  b7            1115   1117         ORA  A                          ;IGNORE NULL
0513  ca 01 05      1116   1118         JZ   GL1
0516  fe 7d         1117   1119         CPI  7DH                        ;DELETE THE WHOLE LINE?
0518  ca 33 05      1118   1120         JZ   GL4                        ;YES
051b  12            1119   1121         STAX D                          ;ELSE SAVE INPUT
051c  13            1120   1122         INX  D                          ;AND BUMP POINTER
051d  fe 0d         1121   1123         CPI  0DH                        ;WAS IT CR?
051f  c8            1122   1124         RZ                              ;YES, END OF LINE
0520  7b            1123   1125         MOV  A,E                        ;ELSE MORE FREE ROOM?
0521  fe f7         1124   1126         CPI  BUFEND AND 0FFH
0523  c2 01 05      1125   1127         JNZ  GL1                        ;YES, GET NEXT INPUT
0526  7b            1126   1128 GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
0527  fe b7         1127   1129         CPI  BUFFER AND 0FFH            ;BUT DO WE HAVE ANY?
0529  ca 33 05      1128   1130         JZ   GL4                        ;NO, REDO WHOLE LINE
052c  1b            1129   1131         DCX  D                          ;YES, BACKUP POINTER
052d  3e 5c         1130   1132         MVI  A,5CH                      ;AND ECHO A BACK-SLASH
052f  d7            1131   1133         RST  2
0530  c3 01 05      1132   1134         JMP  GL1                        ;GO GET NEXT INPUT
0533  cd 0e 00      1133   1135 GL4:    CALL CRLF                       ;REDO ENTIRE LINE
0536  3e 5e         1134   1136         MVI  A,05EH                     ;CR, LF AND UP-ARROW
0538  c3 fd 04      1135   1137         JMP  GETLN
                    1136   1138 ;
053b  7c            1137   1139 FNDLN:  MOV  A,H                        ;*** FNDLN ***
053c  b7            1138   1140         ORA  A                          ;CHECK SIGN OF HL
053d  fa 9f 00      1139   1141         JM   QHOW                       ;IT CANNOT BE -
0540  11 17 08      1140   1142         LXI  D,TXTBGN                   ;INIT TEXT POINTER
                    1141   1143 ;
0543                1142   1144 FNDLP:                                  ;*** FDLNP ***
0543  e5            1143   1145 FL1:    PUSH H                          ;SAVE LINE #
0544  2a 15 08      1144   1146         LHLD TXTUNF                     ;CHECK IF WE PASSED END
0547  2b            1145   1147         DCX  H
0548  e7            1146   1148         RST  4
0549  e1            1147   1149         POP  H                          ;GET LINE # BACK
054a  d8            1148   1150         RC                              ;C,NZ PASSED END
054b  1a            1149   1151         LDAX D                          ;WE DID NOT, GET BYTE 1
054c  95            1150   1152         SUB  L                          ;IS THIS THE LINE?
054d  47            1151   1153         MOV  B,A                        ;COMPARE LOW ORDER
054e  13            1152   1154         INX  D
054f  1a            1153   1155         LDAX D                          ;GET BYTE 2
0550  9c            1154   1156         SBB  H                          ;COMPARE HIGH ORDER
0551  da 58 05      1155   1157         JC   FL2                        ;NO, NOT THERE YET
0554  1b            1156   1158         DCX  D                          ;ELSE WE EITHER FOUND
0555  b0            1157   1159         ORA  B                          ;IT, OR IT IS NOT THERE
0556  c9            1158   1160         RET                             ;NC,Z:FOUND, NC,NZ:NO
                    1159   1161 ;
0557                1160   1162 FNDNXT:                                 ;*** FNDNXT ***
0557  13            1161   1163         INX  D                          ;FIND NEXT LINE
0558  13            1162   1164 FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
                    1163   1165 ;
0559  1a            1164   1166 FNDSKP: LDAX D                          ;*** FNDSKP ***
055a  fe 0d         1165   1167         CPI  CR                         ;TRY TO FIND CR
055c  c2 58 05      1166   1168         JNZ  FL2                        ;KEEP LOOKING
055f  13            1167   1169         INX  D                          ;FOUND CR, SKIP OVER
0560  c3 43 05      1168   1170         JMP  FL1                        ;CHECK IF END OF TEXT
                    1169   1171 ;
                    1170   1172 ;*************************************************************
                    1171   1173 ;
                    1172   1174 ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
                    1173   1175 ;
                    1174   1176 ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
                    1175   1177 ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
                    1176   1178 ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
                    1177   1179 ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
                    1178   1180 ;
                    1179   1181 ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
                    1180   1182 ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
                    1181   1183 ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
                    1182   1184 ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
                    1183   1185 ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
                    1184   1186 ; OVER (USUALLY A JUMP INSTRUCTION.
                    1185   1187 ;
                    1186   1188 ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
                    1187   1189 ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
                    1188   1190 ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
                    1189   1191 ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
                    1190   1192 ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
                    1191   1193 ;
                    1192   1194 ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
                    1193   1195 ;
0563  47            1194   1196 PRTSTG: MOV  B,A                        ;*** PRTSTG ***
0564  1a            1195   1197 PS1:    LDAX D                          ;GET A CHARACTER
0565  13            1196   1198         INX  D                          ;BUMP POINTER
0566  b8            1197   1199         CMP  B                          ;SAME AS OLD A?
0567  c8            1198   1200         RZ                              ;YES, RETURN
0568  d7            1199   1201         RST  2                          ;ELSE PRINT IT
0569  fe 0d         1200   1202         CPI  CR                         ;WAS IT A CR?
056b  c2 64 05      1201   1203         JNZ  PS1                        ;NO, NEXT
056e  c9            1202   1204         RET                             ;YES, RETURN
                    1203   1205 ;
056f  cf            1204   1206 QTSTG:  RST  1                          ;*** QTSTG ***
0570  22            1205   1207         DB   '"'
0571  0f            1206   1208         DB   QT3-$-1
0572  3e 22         1207   1209         MVI  A,22H                      ;IT IS A "
0574  cd 63 05      1208   1210 QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
0577  fe 0d         1209   1211         CPI  CR                         ;WAS LAST ONE A CR?
0579  e1            1210   1212         POP  H                          ;RETURN ADDRESS
057a  ca 47 01      1211   1213         JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
057d  23            1212   1214 QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
057e  23            1213   1215         INX  H
057f  23            1214   1216         INX  H
0580  e9            1215   1217         PCHL                            ;RETURN
0581  cf            1216   1218 QT3:    RST  1                          ;IS IT A '?
0582  27            1217   1219         DB   27H
0583  05            1218   1220         DB   QT4-$-1
0584  3e 27         1219   1221         MVI  A,27H                      ;YES, DO THE SAME
0586  c3 74 05      1220   1222         JMP  QT1                        ;AS IN "
0589  cf            1221   1223 QT4:    RST  1                          ;IS IT BACK-ARROW?
058a  5f            1222   1224         DB   5FH
058b  08            1223   1225         DB   QT5-$-1
058c  3e 8d         1224   1226         MVI  A,08DH                     ;YES, CR WITHOUT LF
058e  d7            1225   1227         RST  2                          ;DO IT TWICE TO GIVE
058f  d7            1226   1228         RST  2                          ;TTY ENOUGH TIME
0590  e1            1227   1229         POP  H                          ;RETURN ADDRESS
0591  c3 7d 05      1228   1230         JMP  QT2
0594  c9            1229   1231 QT5:    RET                             ;NONE OF ABOVE
                    1230   1232 ;
0595  06 00         1231   1233 PRTNUM: MVI  B,0                        ;*** PRTNUM ***
0597  cd 83 04      1232   1234         CALL CHKSGN                     ;CHECK SIGN
059a  f2 a0 05      1233   1235         JP   PN1                        ;NO SIGN
059d  06 2d         1234   1236         MVI  B,'-'                      ;B=SIGN
059f  0d            1235   1237         DCR  C                          ;'-' TAKES SPACE
05a0  d5            1236   1238 PN1:    PUSH D                          ;SAVE
05a1  11 0a 00      1237   1239         LXI  D,0AH                      ;DECIMAL
05a4  d5            1238   1240         PUSH D                          ;SAVE AS A FLAG
05a5  0d            1239   1241         DCR  C                          ;C=SPACES
05a6  c5            1240   1242         PUSH B                          ;SAVE SIGN & SPACE
05a7  cd 66 04      1241   1243 PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
05aa  78            1242   1244         MOV  A,B                        ;RESULT 0?
05ab  b1            1243   1245         ORA  C
05ac  ca b7 05      1244   1246         JZ   PN3                        ;YES, WE GOT ALL
05af  e3            1245   1247         XTHL                            ;NO, SAVE REMAINDER
05b0  2d            1246   1248         DCR  L                          ;AND COUNT SPACE
05b1  e5            1247   1249         PUSH H                          ;HL IS OLD BC
05b2  60            1248   1250         MOV  H,B                        ;MOVE RESULT TO BC
05b3  69            1249   1251         MOV  L,C
05b4  c3 a7 05      1250   1252         JMP  PN2                        ;AND DIVIDE BY 10
05b7  c1            1251   1253 PN3:    POP  B                          ;WE GOT ALL DIGITS IN
05b8  0d            1252   1254 PN4:    DCR  C                          ;THE STACK
05b9  79            1253   1255         MOV  A,C                        ;LOOK AT SPACE COUNT
05ba  b7            1254   1256         ORA  A
05bb  fa c4 05      1255   1257         JM   PN5                        ;NO LEADING BLANKS
05be  3e 20         1256   1258         MVI  A,20H                      ;LEADING BLANKS
05c0  d7            1257   1259         RST  2
05c1  c3 b8 05      1258   1260         JMP  PN4                        ;MORE?
05c4  78            1259   1261 PN5:    MOV  A,B                        ;PRINT SIGN
05c5  b7            1260   1262         ORA  A
05c6  c4 10 00      1261   1263         CNZ  10H
05c9  5d            1262   1264         MOV  E,L                        ;LAST REMAINDER IN E
05ca  7b            1263   1265 PN6:    MOV  A,E                        ;CHECK DIGIT IN E
05cb  fe 0a         1264   1266         CPI  0AH                        ;10 IS FLAG FOR NO MORE
05cd  d1            1265   1267         POP  D
05ce  c8            1266   1268         RZ                              ;IF SO, RETURN
05cf  c6 30         1267   1269         ADI  30H                        ;ELSE CONVERT TO ASCII
05d1  d7            1268   1270         RST  2                          ;AND PRINT THE DIGIT
05d2  c3 ca 05      1269   1271         JMP  PN6                        ;GO BACK FOR MORE
                    1270   1272 ;
05d5  1a            1271   1273 PRTLN:  LDAX D                          ;*** PRTLN ***
05d6  6f            1272   1274         MOV  L,A                        ;LOW ORDER LINE #
05d7  13            1273   1275         INX  D
05d8  1a            1274   1276         LDAX D                          ;HIGH ORDER
05d9  67            1275   1277         MOV  H,A
05da  13            1276   1278         INX  D
05db  0e 04         1277   1279         MVI  C,4H                       ;PRINT 4 DIGIT LINE #
05dd  cd 95 05      1278   1280         CALL PRTNUM
05e0  3e 20         1279   1281         MVI  A,20H                      ;FOLLOWED BY A BLANK
05e2  d7            1280   1282         RST  2
05e3  97            1281   1283         SUB  A                          ;AND THEN THE NEXT
05e4  cd 63 05      1282   1284         CALL PRTSTG
05e7  c9            1283   1285         RET
                    1284   1286 ;
                    1285   1287 ;*************************************************************
                    1286   1288 ;
                    1287   1289 ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
                    1288   1290 ;
                    1289   1291 ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
                    1290   1292 ; DE = HL
                    1291   1293 ;
                    1292   1294 ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
                    1293   1295 ; UNTIL DE = BC
                    1294   1296 ;
                    1295   1297 ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
                    1296   1298 ; STACK
                    1297   1299 ;
                    1298   1300 ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
                    1299   1301 ; STACK
                    1300   1302 ;
05e8  e7            1301   1303 MVUP:   RST  4                          ;*** MVUP ***
05e9  c8            1302   1304         RZ                              ;DE = HL, RETURN
05ea  1a            1303   1305         LDAX D                          ;GET ONE BYTE
05eb  02            1304   1306         STAX B                          ;MOVE IT
05ec  13            1305   1307         INX  D                          ;INCREASE BOTH POINTERS
05ed  03            1306   1308         INX  B
05ee  c3 e8 05      1307   1309         JMP  MVUP                       ;UNTIL DONE
                    1308   1310 ;
05f1  78            1309   1311 MVDOWN: MOV  A,B                        ;*** MVDOWN ***
05f2  92            1310   1312         SUB  D                          ;TEST IF DE = BC
05f3  c2 f9 05      1311   1313         JNZ  MD1                        ;NO, GO MOVE
05f6  79            1312   1314         MOV  A,C                        ;MAYBE, OTHER BYTE?
05f7  93            1313   1315         SUB  E
05f8  c8            1314   1316         RZ                              ;YES, RETURN
05f9  1b            1315   1317 MD1:    DCX  D                          ;ELSE MOVE A BYTE
05fa  2b            1316   1318         DCX  H                          ;BUT FIRST DECREASE
05fb  1a            1317   1319         LDAX D                          ;BOTH POINTERS AND
05fc  77            1318   1320         MOV  M,A                        ;THEN DO IT
05fd  c3 f1 05      1319   1321         JMP  MVDOWN                     ;LOOP BACK
                    1320   1322 ;
0600  c1            1321   1323 POPA:   POP  B                          ;BC = RETURN ADDR.
0601  e1            1322   1324         POP  H                          ;RESTORE LOPVAR, BUT
0602  22 09 08      1323   1325         SHLD LOPVAR                     ;=0 MEANS NO MORE
0605  7c            1324   1326         MOV  A,H
0606  b5            1325   1327         ORA  L
0607  ca 1a 06      1326   1328         JZ   PP1                        ;YEP, GO RETURN
060a  e1            1327   1329         POP  H                          ;NOP, RESTORE OTHERS
060b  22 0b 08      1328   1330         SHLD LOPINC
060e  e1            1329   1331         POP  H
060f  22 0d 08      1330   1332         SHLD LOPLMT
0612  e1            1331   1333         POP  H
0613  22 0f 08      1332   1334         SHLD LOPLN
0616  e1            1333   1335         POP  H
0617  22 11 08      1334   1336         SHLD LOPPT
061a  c5            1335   1337 PP1:    PUSH B                          ;BC = RETURN ADDR.
061b  c9            1336   1338         RET
                    1337   1339 ;
061c  21 f8 09      1338   1340 PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
061f  cd 86 04      1339   1341         CALL CHGSGN
0622  c1            1340   1342         POP  B                          ;BC=RETURN ADDRESS
0623  39            1341   1343         DAD  SP                         ;IS STACK NEAR THE TOP?
0624  d2 f6 04      1342   1344         JNC  QSORRY                     ;YES, SORRY FOR THAT
0627  2a 09 08      1343   1345         LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
062a  7c            1344   1346         MOV  A,H                        ;BUT IF LOPVAR IS 0
062b  b5            1345   1347         ORA  L                          ;THAT WILL BE ALL
062c  ca 42 06      1346   1348         JZ   PU1
062f  2a 11 08      1347   1349         LHLD LOPPT                      ;ELSE, MORE TO SAVE
0632  e5            1348   1350         PUSH H
0633  2a 0f 08      1349   1351         LHLD LOPLN
0636  e5            1350   1352         PUSH H
0637  2a 0d 08      1351   1353         LHLD LOPLMT
063a  e5            1352   1354         PUSH H
063b  2a 0b 08      1353   1355         LHLD LOPINC
063e  e5            1354   1356         PUSH H
063f  2a 09 08      1355   1357         LHLD LOPVAR
0642  e5            1356   1358 PU1:    PUSH H
0643  c5            1357   1359         PUSH B                          ;BC = RETURN ADDR.
0644  c9            1358   1360         RET
                    1359   1361 ;
                    1360   1362 ;*************************************************************
                    1361   1363 ;
                    1362   1364 ; *** OUTC *** & CHKIO ***
                    1363   1365 ;
                    1364   1366 ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
                    1365   1367 ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
                    1366   1368 ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
                    1367   1369 ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
                    1368   1370 ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
                    1369   1371 ; ARE RESTORED.
                    1370   1372 ;
                    1371   1373 ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
                    1372   1374 ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
                    1373   1375 ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
                    1374   1376 ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
                    1375   1377 ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
                    1376   1378 ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
                    1377   1379 ;
                    1378   1380 ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
                    1379   1381 ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
                    1380   1382 ;       ORA  A
0645  32 00 08      1381   1383 INIT:   STA  OCSW
                    1382   1384 ;       MVI  D,19H
0648  16 02         1383   1385         MVI  D,2
064a                1384   1386 PATLOP:
064a  cd 0e 00      1385   1387         CALL CRLF
064d  15            1386   1388         DCR  D
064e  c2 4a 06      1387   1389         JNZ  PATLOP
0651  97            1388   1390         SUB  A
0652  11 9d 06      1389   1391         LXI  D,MSG1
0655  cd 63 05      1390   1392         CALL PRTSTG
0658  21 00 00      1391   1393         LXI  H,START
065b  22 13 08      1392   1394         SHLD RANPNT
065e  21 17 08      1393   1395         LXI  H,TXTBGN
0661  22 15 08      1394   1396         SHLD TXTUNF
0664  c3 ba 00      1395   1397         JMP  RSTART
0667  c2 6c 06      1396   1398 OC2:    JNZ  OC3                        ;IT IS ON
066a  f1            1397   1399         POP  PSW                        ;IT IS OFF
066b  c9            1398   1400         RET                             ;RESTORE AF AND RETURN
066c  db 00         1399   1401 OC3:    IN   0                          ;COME HERE TO DO OUTPUT
066e  07            1400   1402         RLC                             ;STATUS BIT
066f  da 6c 06      1401   1403         JC   OC3                        ;NOT READY, WAIT
0672  f1            1402   1404         POP  PSW                        ;READY, GET OLD A BACK
0673  d3 01         1403   1405         OUT  1                          ;AND SEND IT OUT
0675  fe 0d         1404   1406         CPI  CR                         ;WAS IT CR?
0677  c0            1405   1407         RNZ                             ;NO, FINISHED
0678  3e 0a         1406   1408         MVI  A,LF                       ;YES, WE SEND LF TOO
067a  d7            1407   1409         RST  2                          ;THIS IS RECURSIVE
067b  3e 0d         1408   1410         MVI  A,CR                       ;GET CR BACK IN A
067d  c9            1409   1411         RET
                    1410   1412 ;
067e  db 00         1411   1413 CHKIO:  IN   0                          ;*** CHKIO ***
0680  2f            1412   1414         CMA                             ;STATUS BIT FLIPPED
0681  e6 01         1413   1415         ANI  1H                         ;MASK STATUS BIT
0683  c8            1414   1416         RZ                              ;NOT READY, RETURN "Z"
0684  db 01         1415   1417         IN   1                          ;READY, READ DATA
0686  e6 7f         1416   1418         ANI  7FH                        ;MASK BIT 7 OFF
0688  fe 0f         1417   1419         CPI  0FH                        ;IS IT CONTROL-O?
068a  c2 97 06      1418   1420         JNZ  CI1                        ;NO, MORE CHECKING
068d  3a 00 08      1419   1421         LDA  OCSW                       ;CONTROL-O FLIPS OCSW
0690  2f            1420   1422         CMA                             ;ON TO OFF, OFF TO ON
0691  32 00 08      1421   1423         STA  OCSW
0694  c3 7e 06      1422   1424         JMP  CHKIO                      ;GET ANOTHER INPUT
0697  fe 03         1423   1425 CI1:    CPI  3H                         ;IS IT CONTROL-C?
0699  c0            1424   1426         RNZ                             ;NO, RETURN "NZ"
069a  c3 ba 00      1425   1427         JMP  RSTART                     ;YES, RESTART TBI
                    1426   1428 ;
069d  54 49 4e 59   1427   1429 MSG1:   DB   'TINY '
06a1  20            1427   1430
06a2  42 41 53 49   1428   1431         DB   'BASIC'
06a6  43            1428   1432
06a7  0d            1429   1433         DB   CR
                    1430   1434 ;
                    1431   1435 ;*************************************************************
                    1432   1436 ;
                    1433   1437 ; *** TABLES *** DIRECT *** & EXEC ***
                    1434   1438 ;
                    1435   1439 ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
                    1436   1440 ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
                    1437   1441 ; OF CODE ACCORDING TO THE TABLE.
                    1438   1442 ;
                    1439   1443 ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
                    1440   1444 ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
                    1441   1445 ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
                    1442   1446 ; ALL DIRECT AND STATEMENT COMMANDS.
                    1443   1447 ;
                    1444   1448 ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
                    1445   1449 ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
                    1446   1450 ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
                    1447   1451 ;
                    1448   1452 ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
                    1449   1453 ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
                    1450   1454 ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
                    1451   1455 ; BYTE SET TO 1.
                    1452   1456 ;
                    1453   1457 ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
                    1454   1458 ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
                    1455   1459 ; MATCH THIS NULL ITEM AS DEFAULT.
                    1456   1460 ;
06a8                1457   1461 TAB1:                                   ;DIRECT COMMANDS
06a8  4c 49 53 54   1458   1462         DB   'LIST'
06ac                1459   1463         DWA  LIST
06ac  81          + 1459   1464         DB   (LIST SHR 8) + 128
06ad  6f          + 1459   1465         DB   LIST AND 0FFH
06ae  52 55 4e      1460   1466         DB   'RUN'
06b1                1461   1467         DWA  RUN
06b1  81          + 1461   1468         DB   (RUN SHR 8) + 128
06b2  41          + 1461   1469         DB   RUN AND 0FFH
06b3  4e 45 57      1462   1470         DB   'NEW'
06b6                1463   1471         DWA  NEW
06b6  81          + 1463   1472         DB   (NEW SHR 8) + 128
06b7  32          + 1463   1473         DB   NEW AND 0FFH
                    1464   1474 ;
06b8                1465   1475 TAB2:                                   ;DIRECT/STATEMENT
06b8  4e 45 58 54   1466   1476         DB   'NEXT'
06bc                1467   1477         DWA  NEXT
06bc  82          + 1467   1478         DB   (NEXT SHR 8) + 128
06bd  57          + 1467   1479         DB   NEXT AND 0FFH
06be  4c 45 54      1468   1480         DB   'LET'
06c1                1469   1481         DWA  LET
06c1  83          + 1469   1482         DB   (LET SHR 8) + 128
06c2  23          + 1469   1483         DB   LET AND 0FFH
06c3  49 46         1470   1484         DB   'IF'
06c5                1471   1485         DWA  IFF
06c5  82          + 1471   1486         DB   (IFF SHR 8) + 128
06c6  b4          + 1471   1487         DB   IFF AND 0FFH
06c7  47 4f 54 4f   1472   1488         DB   'GOTO'
06cb                1473   1489         DWA  GOTO
06cb  81          + 1473   1490         DB   (GOTO SHR 8) + 128
06cc  60          + 1473   1491         DB   GOTO AND 0FFH
06cd  47 4f 53 55   1474   1492         DB   'GOSUB'
06d1  42            1474   1493
06d2                1475   1494         DWA  GOSUB
06d2  81          + 1475   1495         DB   (GOSUB SHR 8) + 128
06d3  bf          + 1475   1496         DB   GOSUB AND 0FFH
06d4  52 45 54 55   1476   1497         DB   'RETURN'
06d8  52 4e         1476   1498
06da                1477   1499         DWA  RETURN
06da  81          + 1477   1500         DB   (RETURN SHR 8) + 128
06db  df          + 1477   1501         DB   RETURN AND 0FFH
06dc  52 45 4d      1478   1502         DB   'REM'
06df                1479   1503         DWA  REM
06df  82          + 1479   1504         DB   (REM SHR 8) + 128
06e0  b0          + 1479   1505         DB   REM AND 0FFH
06e1  46 4f 52      1480   1506         DB   'FOR'
06e4                1481   1507         DWA  FOR
06e4  81          + 1481   1508         DB   (FOR SHR 8) + 128
06e5  f8          + 1481   1509         DB   FOR AND 0FFH
06e6  49 4e 50 55   1482   1510         DB   'INPUT'
06ea  54            1482   1511
06eb                1483   1512         DWA  INPUT
06eb  82          + 1483   1513         DB   (INPUT SHR 8) + 128
06ec  cd          + 1483   1514         DB   INPUT AND 0FFH
06ed  50 52 49 4e   1484   1515         DB   'PRINT'
06f1  54            1484   1516
06f2                1485   1517         DWA  PRINT
06f2  81          + 1485   1518         DB   (PRINT SHR 8) + 128
06f3  87          + 1485   1519         DB   PRINT AND 0FFH
06f4  53 54 4f 50   1486   1520         DB   'STOP'
06f8                1487   1521         DWA  STOP
06f8  81          + 1487   1522         DB   (STOP SHR 8) + 128
06f9  3b          + 1487   1523         DB   STOP AND 0FFH
06fa                1488   1524         DWA  DEFLT
06fa  83          + 1488   1525         DB   (DEFLT SHR 8) + 128
06fb  1d          + 1488   1526         DB   DEFLT AND 0FFH
                    1489   1527 ;
06fc                1490   1528 TAB4:                                   ;FUNCTIONS
06fc  52 4e 44      1491   1529         DB   'RND'
06ff                1492   1530         DWA  RND
06ff  84          + 1492   1531         DB   (RND SHR 8) + 128
0700  25          + 1492   1532         DB   RND AND 0FFH
0701  41 42 53      1493   1533         DB   'ABS'
0704                1494   1534         DWA  ABS
0704  84          + 1494   1535         DB   (ABS SHR 8) + 128
0705  50          + 1494   1536         DB   ABS AND 0FFH
0706  53 49 5a 45   1495   1537         DB   'SIZE'
070a                1496   1538         DWA  SIZE
070a  84          + 1496   1539         DB   (SIZE SHR 8) + 128
070b  59          + 1496   1540         DB   SIZE AND 0FFH
070c                1497   1541         DWA  XP40
070c  84          + 1497   1542         DB   (XP40 SHR 8) + 128
070d  0b          + 1497   1543         DB   XP40 AND 0FFH
                    1498   1544 ;
070e                1499   1545 TAB5:                                   ;"TO" IN "FOR"
070e  54 4f         1500   1546         DB   'TO'
0710                1501   1547         DWA  FR1
0710  82          + 1501   1548         DB   (FR1 SHR 8) + 128
0711  08          + 1501   1549         DB   FR1 AND 0FFH
0712                1502   1550         DWA  QWHAT
0712  84          + 1502   1551         DB   (QWHAT SHR 8) + 128
0713  c9          + 1502   1552         DB   QWHAT AND 0FFH
                    1503   1553 ;
0714                1504   1554 TAB6:                                   ;"STEP" IN "FOR"
0714  53 54 45 50   1505   1555         DB   'STEP'
0718                1506   1556         DWA  FR2
0718  82          + 1506   1557         DB   (FR2 SHR 8) + 128
0719  12          + 1506   1558         DB   FR2 AND 0FFH
071a                1507   1559         DWA  FR3
071a  82          + 1507   1560         DB   (FR3 SHR 8) + 128
071b  16          + 1507   1561         DB   FR3 AND 0FFH
                    1508   1562 ;
071c                1509   1563 TAB8:                                   ;RELATION OPERATORS
071c  3e 3d         1510   1564         DB   '>='
071e                1511   1565         DWA  XP11
071e  83          + 1511   1566         DB   (XP11 SHR 8) + 128
071f  33          + 1511   1567         DB   XP11 AND 0FFH
0720  23            1512   1568         DB   '#'
0721                1513   1569         DWA  XP12
0721  83          + 1513   1570         DB   (XP12 SHR 8) + 128
0722  39          + 1513   1571         DB   XP12 AND 0FFH
0723  3e            1514   1572         DB   '>'
0724                1515   1573         DWA  XP13
0724  83          + 1515   1574         DB   (XP13 SHR 8) + 128
0725  3f          + 1515   1575         DB   XP13 AND 0FFH
0726  3d            1516   1576         DB   '='
0727                1517   1577         DWA  XP15
0727  83          + 1517   1578         DB   (XP15 SHR 8) + 128
0728  4e          + 1517   1579         DB   XP15 AND 0FFH
0729  3c 3d         1518   1580         DB   '<='
072b                1519   1581         DWA  XP14
072b  83          + 1519   1582         DB   (XP14 SHR 8) + 128
072c  46          + 1519   1583         DB   XP14 AND 0FFH
072d  3c            1520   1584         DB   '<'
072e                1521   1585         DWA  XP16
072e  83          + 1521   1586         DB   (XP16 SHR 8) + 128
072f  54          + 1521   1587         DB   XP16 AND 0FFH
0730                1522   1588         DWA  XP17
0730  83          + 1522   1589         DB   (XP17 SHR 8) + 128
0731  5a          + 1522   1590         DB   XP17 AND 0FFH
                    1523   1591 ;
0732  21 a7 06      1524   1592 DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
                    1525   1593 ;
0735                1526   1594 EXEC:                                   ;*** EXEC ***
0735  ef            1527   1595 EX0:    RST  5                          ;IGNORE LEADING BLANKS
0736  d5            1528   1596         PUSH D                          ;SAVE POINTER
0737  1a            1529   1597 EX1:    LDAX D                          ;IF FOUND '.' IN STRING
0738  13            1530   1598         INX  D                          ;BEFORE ANY MISMATCH
0739  fe 2e         1531   1599         CPI  2EH                        ;WE DECLARE A MATCH
073b  ca 54 07      1532   1600         JZ   EX3
073e  23            1533   1601         INX  H                          ;HL->TABLE
073f  be            1534   1602         CMP  M                          ;IF MATCH, TEST NEXT
0740  ca 37 07      1535   1603         JZ   EX1
0743  3e 7f         1536   1604         MVI  A,07FH                     ;ELSE SEE IF BIT 7
0745  1b            1537   1605         DCX  D                          ;OF TABLE IS SET, WHICH
0746  be            1538   1606         CMP  M                          ;IS THE JUMP ADDR. (HI)
0747  da 5b 07      1539   1607         JC   EX5                        ;C:YES, MATCHED
074a  23            1540   1608 EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
074b  be            1541   1609         CMP  M
074c  d2 4a 07      1542   1610         JNC  EX2
074f  23            1543   1611         INX  H                          ;BUMP TO NEXT TAB. ITEM
0750  d1            1544   1612         POP  D                          ;RESTORE STRING POINTER
0751  c3 35 07      1545   1613         JMP  EX0                        ;TEST AGAINST NEXT ITEM
0754  3e 7f         1546   1614 EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
0756  23            1547   1615 EX4:    INX  H                          ;JUMP ADDR., WHICH IS
0757  be            1548   1616         CMP  M                          ;FLAGGED BY BIT 7
0758  d2 56 07      1549   1617         JNC  EX4
075b  7e            1550   1618 EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
075c  23            1551   1619         INX  H                          ;ADDRESS FROM THE TABLE
075d  6e            1552   1620         MOV  L,M
075e  e6 7f         1553   1621         ANI  7FH                        ;MASK OFF BIT 7
0760  67            1554   1622         MOV  H,A
0761  f1            1555   1623         POP  PSW                        ;CLEAN UP THE GABAGE
0762  e9            1556   1624         PCHL                            ;AND WE GO DO IT
                    1557   1625 ;
0763                1558   1626 LSTROM:                                 ;ALL ABOVE CAN BE ROM
                    1559   1627 ;       ORG  1000H                      ;HERE DOWN MUST BE RAM
                    1560   1628         ORG  0800H
0800                1561   1629 OCSW:   DS   1                          ;SWITCH FOR OUTPUT
0801                1562   1630 CURRNT: DS   2                          ;POINTS TO CURRENT LINE
0803                1563   1631 STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
0805                1564   1632 VARNXT: DS   2                          ;TEMP STORAGE
0807                1565   1633 STKINP: DS   2                          ;SAVES SP IN 'INPUT'
0809                1566   1634 LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
080b                1567   1635 LOPINC: DS   2                          ;INCREMENT
080d                1568   1636 LOPLMT: DS   2                          ;LIMIT
080f                1569   1637 LOPLN:  DS   2                          ;LINE NUMBER
0811                1570   1638 LOPPT:  DS   2                          ;TEXT POINTER
0813                1571   1639 RANPNT: DS   2                          ;RANDOM NUMBER POINTER
0815                1572   1640 TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
0817                1573   1641 TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
                    1574   1642 ;       ORG  1366H
                    1575   1643         ORG  0980H
0980                1576   1644 TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
0980                1577   1645 VARBGN: DS   55                         ;VARIABLE @(0)
09b7                1578   1646 BUFFER: DS   64                         ;INPUT BUFFER
09f7                1579   1647 BUFEND: DS   1                          ;BUFFER ENDS
09f8                1580   1648 STKLMT: DS   1                          ;TOP LIMIT FOR STACK
                    1581   1649 ;       ORG  1400H
                    1582   1650         ORG  0A00H
0a00                1583   1651 STACK:  DS   0                          ;STACK STARTS HERE
                    1584   1652 ;
000d  =             1585   1653 CR      EQU  0DH
000a  =             1586   1654 LF      EQU  0AH
                    1587   1655 
0a00                1588   1656         END

Macro table

DWA    

Symbol table

ABS    0450    AHOW   00a0    ASORRY 04f7    AWHAT  04ca    BUFEND 09f7 
BUFFER 09b7    CHGSGN 0486    CHKIO  067e    CHKSGN 0483    CI1    0697 
CK1    04a1    CKHLDE 049b    CR     000d    CRLF   000e    CURRNT 0801 
DEFLT  031d    DIRECT 0732    DIVIDE 0466    DV1    0471    DV2    0473 
ENDCHK 04c5    ERROR  04cd    EX0    0735    EX1    0737    EX2    074a 
EX3    0754    EX4    0756    EX5    075b    EXEC   0735    EXPR1  032d 
EXPR2  0371    EXPR3  03a5    EXPR4  0405    FI1    04bd    FI2    04c4 
FIN    04b6    FL1    0543    FL2    0558    FNDLN  053b    FNDLP  0543 
FNDNXT 0557    FNDSKP 0559    FOR    01f8    FR1    0208    FR2    0212 
FR3    0216    FR4    0219    FR5    021c*   FR7    0231    FR8    0252 
GETLN  04fd    GL1    0501    GL3    0526    GL4    0533    GOSUB  01bf 
GOTO   0160    HOW    00a6    IFF    02b4    INIT   0645    INPERR 02c3 
INPUT  02cd    IP1    02cd    IP2    02db    IP3    02eb    IP4    0315 
IP5    031c    LET    0323    LF     000a    LIST   016f    LOPINC 080b 
LOPLMT 080d    LOPLN  080f    LOPPT  0811    LOPVAR 0809    LS1    0178 
LSTROM 0763    LT1    032c    MD1    05f9    MSG1   069d    MVDOWN 05f1 
MVUP   05e8    NEW    0132    NEXT   0257    NX0    025e    NX1    0298 
NX2    02ac    NX3    0276    NX4    0288    NX5    02aa    OC2    0667 
OC3    066c    OCSW   0800    OK     00ab    PARN   041a    PATLOP 064a 
PN1    05a0    PN2    05a7    PN3    05b7    PN4    05b8    PN5    05c4 
PN6    05ca    POPA   0600    PP1    061a    PR0    019b    PR1    01a3 
PR2    0192    PR3    01a9    PR6    01b2    PR8    01b6    PRINT  0187 
PRTLN  05d5    PRTNUM 0595    PRTSTG 0563    PS1    0564    PU1    0642 
PUSHA  061c    QHOW   009f    QSORRY 04f6    QT1    0574    QT2    057d 
QT3    0581    QT4    0589    QT5    0594    QTSTG  056f    QWHAT  04c9 
RA1    0440    RANPNT 0813    REM    02b0    RETURN 01df    RND    0425 
RSTART 00ba    RUN    0141    RUNNXL 0147    RUNSML 0157    RUNTSL 0150 
SETVAL 04a3    SIZE   0459    SORRY  00b4    SS1    0028    ST1    00bd*
ST2    00cd    ST3    00d6    ST4    010b    STACK  0a00    START  0000 
STKGOS 0803    STKINP 0807    STKLMT 09f8    STOP   013b    SUBDE  047c 
SV1    04b3    TAB1   06a8    TAB2   06b8    TAB4   06fc    TAB5   070e 
TAB6   0714    TAB8   071c    TC1    0068    TC2    0073    TN1    007c 
TSTNUM 0077    TV1    0058    TXTBGN 0817    TXTEND 0980    TXTUNF 0815 
VARBGN 0980    VARNXT 0805    WHAT   00ae    XP11   0333    XP12   0339 
XP13   033f    XP14   0346    XP15   034e    XP16   0354    XP17   035a 
XP18   035c    XP21   037a    XP22   037d    XP23   0380    XP24   0387 
XP25   0398    XP26   039b    XP31   03a8    XP32   03c5    XP33   03cd 
XP34   03d8    XP35   03f7    XP40   040b    XP41   0414    XP42   0421 
XP43   0422    
